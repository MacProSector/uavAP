// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ManeuverPlanner.proto

#ifndef PROTOBUF_INCLUDED_ManeuverPlanner_2eproto
#define PROTOBUF_INCLUDED_ManeuverPlanner_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Shapes.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ManeuverPlanner_2eproto 

namespace protobuf_ManeuverPlanner_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ManeuverPlanner_2eproto
class ManeuverPlannerParams;
class ManeuverPlannerParamsDefaultTypeInternal;
extern ManeuverPlannerParamsDefaultTypeInternal _ManeuverPlannerParams_default_instance_;
class ManeuverPlannerStatus;
class ManeuverPlannerStatusDefaultTypeInternal;
extern ManeuverPlannerStatusDefaultTypeInternal _ManeuverPlannerStatus_default_instance_;
namespace google {
namespace protobuf {
template<> ::ManeuverPlannerParams* Arena::CreateMaybeMessage<::ManeuverPlannerParams>(Arena*);
template<> ::ManeuverPlannerStatus* Arena::CreateMaybeMessage<::ManeuverPlannerStatus>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ManeuverPlannerParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ManeuverPlannerParams) */ {
 public:
  ManeuverPlannerParams();
  virtual ~ManeuverPlannerParams();

  ManeuverPlannerParams(const ManeuverPlannerParams& from);

  inline ManeuverPlannerParams& operator=(const ManeuverPlannerParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ManeuverPlannerParams(ManeuverPlannerParams&& from) noexcept
    : ManeuverPlannerParams() {
    *this = ::std::move(from);
  }

  inline ManeuverPlannerParams& operator=(ManeuverPlannerParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ManeuverPlannerParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManeuverPlannerParams* internal_default_instance() {
    return reinterpret_cast<const ManeuverPlannerParams*>(
               &_ManeuverPlannerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ManeuverPlannerParams* other);
  friend void swap(ManeuverPlannerParams& a, ManeuverPlannerParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ManeuverPlannerParams* New() const final {
    return CreateMaybeMessage<ManeuverPlannerParams>(NULL);
  }

  ManeuverPlannerParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ManeuverPlannerParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ManeuverPlannerParams& from);
  void MergeFrom(const ManeuverPlannerParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManeuverPlannerParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Rectanguloid safety_bounds = 1;
  bool has_safety_bounds() const;
  void clear_safety_bounds();
  static const int kSafetyBoundsFieldNumber = 1;
  private:
  const ::Rectanguloid& _internal_safety_bounds() const;
  public:
  const ::Rectanguloid& safety_bounds() const;
  ::Rectanguloid* release_safety_bounds();
  ::Rectanguloid* mutable_safety_bounds();
  void set_allocated_safety_bounds(::Rectanguloid* safety_bounds);

  // double return_velocity = 2;
  void clear_return_velocity();
  static const int kReturnVelocityFieldNumber = 2;
  double return_velocity() const;
  void set_return_velocity(double value);

  // bool manual_restart = 3;
  void clear_manual_restart();
  static const int kManualRestartFieldNumber = 3;
  bool manual_restart() const;
  void set_manual_restart(bool value);

  // bool maneuver_restart = 4;
  void clear_maneuver_restart();
  static const int kManeuverRestartFieldNumber = 4;
  bool maneuver_restart() const;
  void set_maneuver_restart(bool value);

  // bool use_safety_bounds = 5;
  void clear_use_safety_bounds();
  static const int kUseSafetyBoundsFieldNumber = 5;
  bool use_safety_bounds() const;
  void set_use_safety_bounds(bool value);

  // bool perform_in_safety_bounds = 6;
  void clear_perform_in_safety_bounds();
  static const int kPerformInSafetyBoundsFieldNumber = 6;
  bool perform_in_safety_bounds() const;
  void set_perform_in_safety_bounds(bool value);

  // @@protoc_insertion_point(class_scope:ManeuverPlannerParams)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Rectanguloid* safety_bounds_;
  double return_velocity_;
  bool manual_restart_;
  bool maneuver_restart_;
  bool use_safety_bounds_;
  bool perform_in_safety_bounds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ManeuverPlanner_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ManeuverPlannerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ManeuverPlannerStatus) */ {
 public:
  ManeuverPlannerStatus();
  virtual ~ManeuverPlannerStatus();

  ManeuverPlannerStatus(const ManeuverPlannerStatus& from);

  inline ManeuverPlannerStatus& operator=(const ManeuverPlannerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ManeuverPlannerStatus(ManeuverPlannerStatus&& from) noexcept
    : ManeuverPlannerStatus() {
    *this = ::std::move(from);
  }

  inline ManeuverPlannerStatus& operator=(ManeuverPlannerStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ManeuverPlannerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManeuverPlannerStatus* internal_default_instance() {
    return reinterpret_cast<const ManeuverPlannerStatus*>(
               &_ManeuverPlannerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ManeuverPlannerStatus* other);
  friend void swap(ManeuverPlannerStatus& a, ManeuverPlannerStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ManeuverPlannerStatus* New() const final {
    return CreateMaybeMessage<ManeuverPlannerStatus>(NULL);
  }

  ManeuverPlannerStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ManeuverPlannerStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ManeuverPlannerStatus& from);
  void MergeFrom(const ManeuverPlannerStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManeuverPlannerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool maneuver_set_active = 1;
  void clear_maneuver_set_active();
  static const int kManeuverSetActiveFieldNumber = 1;
  bool maneuver_set_active() const;
  void set_maneuver_set_active(bool value);

  // bool manual_override_active = 2;
  void clear_manual_override_active();
  static const int kManualOverrideActiveFieldNumber = 2;
  bool manual_override_active() const;
  void set_manual_override_active(bool value);

  // @@protoc_insertion_point(class_scope:ManeuverPlannerStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool maneuver_set_active_;
  bool manual_override_active_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ManeuverPlanner_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ManeuverPlannerParams

// .Rectanguloid safety_bounds = 1;
inline bool ManeuverPlannerParams::has_safety_bounds() const {
  return this != internal_default_instance() && safety_bounds_ != NULL;
}
inline const ::Rectanguloid& ManeuverPlannerParams::_internal_safety_bounds() const {
  return *safety_bounds_;
}
inline const ::Rectanguloid& ManeuverPlannerParams::safety_bounds() const {
  const ::Rectanguloid* p = safety_bounds_;
  // @@protoc_insertion_point(field_get:ManeuverPlannerParams.safety_bounds)
  return p != NULL ? *p : *reinterpret_cast<const ::Rectanguloid*>(
      &::_Rectanguloid_default_instance_);
}
inline ::Rectanguloid* ManeuverPlannerParams::release_safety_bounds() {
  // @@protoc_insertion_point(field_release:ManeuverPlannerParams.safety_bounds)
  
  ::Rectanguloid* temp = safety_bounds_;
  safety_bounds_ = NULL;
  return temp;
}
inline ::Rectanguloid* ManeuverPlannerParams::mutable_safety_bounds() {
  
  if (safety_bounds_ == NULL) {
    auto* p = CreateMaybeMessage<::Rectanguloid>(GetArenaNoVirtual());
    safety_bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ManeuverPlannerParams.safety_bounds)
  return safety_bounds_;
}
inline void ManeuverPlannerParams::set_allocated_safety_bounds(::Rectanguloid* safety_bounds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(safety_bounds_);
  }
  if (safety_bounds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      safety_bounds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, safety_bounds, submessage_arena);
    }
    
  } else {
    
  }
  safety_bounds_ = safety_bounds;
  // @@protoc_insertion_point(field_set_allocated:ManeuverPlannerParams.safety_bounds)
}

// double return_velocity = 2;
inline void ManeuverPlannerParams::clear_return_velocity() {
  return_velocity_ = 0;
}
inline double ManeuverPlannerParams::return_velocity() const {
  // @@protoc_insertion_point(field_get:ManeuverPlannerParams.return_velocity)
  return return_velocity_;
}
inline void ManeuverPlannerParams::set_return_velocity(double value) {
  
  return_velocity_ = value;
  // @@protoc_insertion_point(field_set:ManeuverPlannerParams.return_velocity)
}

// bool manual_restart = 3;
inline void ManeuverPlannerParams::clear_manual_restart() {
  manual_restart_ = false;
}
inline bool ManeuverPlannerParams::manual_restart() const {
  // @@protoc_insertion_point(field_get:ManeuverPlannerParams.manual_restart)
  return manual_restart_;
}
inline void ManeuverPlannerParams::set_manual_restart(bool value) {
  
  manual_restart_ = value;
  // @@protoc_insertion_point(field_set:ManeuverPlannerParams.manual_restart)
}

// bool maneuver_restart = 4;
inline void ManeuverPlannerParams::clear_maneuver_restart() {
  maneuver_restart_ = false;
}
inline bool ManeuverPlannerParams::maneuver_restart() const {
  // @@protoc_insertion_point(field_get:ManeuverPlannerParams.maneuver_restart)
  return maneuver_restart_;
}
inline void ManeuverPlannerParams::set_maneuver_restart(bool value) {
  
  maneuver_restart_ = value;
  // @@protoc_insertion_point(field_set:ManeuverPlannerParams.maneuver_restart)
}

// bool use_safety_bounds = 5;
inline void ManeuverPlannerParams::clear_use_safety_bounds() {
  use_safety_bounds_ = false;
}
inline bool ManeuverPlannerParams::use_safety_bounds() const {
  // @@protoc_insertion_point(field_get:ManeuverPlannerParams.use_safety_bounds)
  return use_safety_bounds_;
}
inline void ManeuverPlannerParams::set_use_safety_bounds(bool value) {
  
  use_safety_bounds_ = value;
  // @@protoc_insertion_point(field_set:ManeuverPlannerParams.use_safety_bounds)
}

// bool perform_in_safety_bounds = 6;
inline void ManeuverPlannerParams::clear_perform_in_safety_bounds() {
  perform_in_safety_bounds_ = false;
}
inline bool ManeuverPlannerParams::perform_in_safety_bounds() const {
  // @@protoc_insertion_point(field_get:ManeuverPlannerParams.perform_in_safety_bounds)
  return perform_in_safety_bounds_;
}
inline void ManeuverPlannerParams::set_perform_in_safety_bounds(bool value) {
  
  perform_in_safety_bounds_ = value;
  // @@protoc_insertion_point(field_set:ManeuverPlannerParams.perform_in_safety_bounds)
}

// -------------------------------------------------------------------

// ManeuverPlannerStatus

// bool maneuver_set_active = 1;
inline void ManeuverPlannerStatus::clear_maneuver_set_active() {
  maneuver_set_active_ = false;
}
inline bool ManeuverPlannerStatus::maneuver_set_active() const {
  // @@protoc_insertion_point(field_get:ManeuverPlannerStatus.maneuver_set_active)
  return maneuver_set_active_;
}
inline void ManeuverPlannerStatus::set_maneuver_set_active(bool value) {
  
  maneuver_set_active_ = value;
  // @@protoc_insertion_point(field_set:ManeuverPlannerStatus.maneuver_set_active)
}

// bool manual_override_active = 2;
inline void ManeuverPlannerStatus::clear_manual_override_active() {
  manual_override_active_ = false;
}
inline bool ManeuverPlannerStatus::manual_override_active() const {
  // @@protoc_insertion_point(field_get:ManeuverPlannerStatus.manual_override_active)
  return manual_override_active_;
}
inline void ManeuverPlannerStatus::set_manual_override_active(bool value) {
  
  manual_override_active_ = value;
  // @@protoc_insertion_point(field_set:ManeuverPlannerStatus.manual_override_active)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ManeuverPlanner_2eproto
