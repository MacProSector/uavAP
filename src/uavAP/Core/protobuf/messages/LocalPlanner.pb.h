// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LocalPlanner.proto

#ifndef PROTOBUF_INCLUDED_LocalPlanner_2eproto
#define PROTOBUF_INCLUDED_LocalPlanner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Velocities.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LocalPlanner_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_LocalPlanner_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_LocalPlanner_2eproto();
class AirplaneLinearLocalPlannerParams;
class AirplaneLinearLocalPlannerParamsDefaultTypeInternal;
extern AirplaneLinearLocalPlannerParamsDefaultTypeInternal _AirplaneLinearLocalPlannerParams_default_instance_;
class AirplaneLinearLocalPlannerStatus;
class AirplaneLinearLocalPlannerStatusDefaultTypeInternal;
extern AirplaneLinearLocalPlannerStatusDefaultTypeInternal _AirplaneLinearLocalPlannerStatus_default_instance_;
class LinearLocalPlannerParams;
class LinearLocalPlannerParamsDefaultTypeInternal;
extern LinearLocalPlannerParamsDefaultTypeInternal _LinearLocalPlannerParams_default_instance_;
class LinearLocalPlannerStatus;
class LinearLocalPlannerStatusDefaultTypeInternal;
extern LinearLocalPlannerStatusDefaultTypeInternal _LinearLocalPlannerStatus_default_instance_;
class LocalPlannerParams;
class LocalPlannerParamsDefaultTypeInternal;
extern LocalPlannerParamsDefaultTypeInternal _LocalPlannerParams_default_instance_;
class LocalPlannerStatus;
class LocalPlannerStatusDefaultTypeInternal;
extern LocalPlannerStatusDefaultTypeInternal _LocalPlannerStatus_default_instance_;
class ManeuverLocalPlannerParams;
class ManeuverLocalPlannerParamsDefaultTypeInternal;
extern ManeuverLocalPlannerParamsDefaultTypeInternal _ManeuverLocalPlannerParams_default_instance_;
class ManeuverLocalPlannerStatus;
class ManeuverLocalPlannerStatusDefaultTypeInternal;
extern ManeuverLocalPlannerStatusDefaultTypeInternal _ManeuverLocalPlannerStatus_default_instance_;
namespace google {
namespace protobuf {
template<> ::AirplaneLinearLocalPlannerParams* Arena::CreateMaybeMessage<::AirplaneLinearLocalPlannerParams>(Arena*);
template<> ::AirplaneLinearLocalPlannerStatus* Arena::CreateMaybeMessage<::AirplaneLinearLocalPlannerStatus>(Arena*);
template<> ::LinearLocalPlannerParams* Arena::CreateMaybeMessage<::LinearLocalPlannerParams>(Arena*);
template<> ::LinearLocalPlannerStatus* Arena::CreateMaybeMessage<::LinearLocalPlannerStatus>(Arena*);
template<> ::LocalPlannerParams* Arena::CreateMaybeMessage<::LocalPlannerParams>(Arena*);
template<> ::LocalPlannerStatus* Arena::CreateMaybeMessage<::LocalPlannerStatus>(Arena*);
template<> ::ManeuverLocalPlannerParams* Arena::CreateMaybeMessage<::ManeuverLocalPlannerParams>(Arena*);
template<> ::ManeuverLocalPlannerStatus* Arena::CreateMaybeMessage<::ManeuverLocalPlannerStatus>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class AirplaneLinearLocalPlannerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AirplaneLinearLocalPlannerStatus) */ {
 public:
  AirplaneLinearLocalPlannerStatus();
  virtual ~AirplaneLinearLocalPlannerStatus();

  AirplaneLinearLocalPlannerStatus(const AirplaneLinearLocalPlannerStatus& from);

  inline AirplaneLinearLocalPlannerStatus& operator=(const AirplaneLinearLocalPlannerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AirplaneLinearLocalPlannerStatus(AirplaneLinearLocalPlannerStatus&& from) noexcept
    : AirplaneLinearLocalPlannerStatus() {
    *this = ::std::move(from);
  }

  inline AirplaneLinearLocalPlannerStatus& operator=(AirplaneLinearLocalPlannerStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AirplaneLinearLocalPlannerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AirplaneLinearLocalPlannerStatus* internal_default_instance() {
    return reinterpret_cast<const AirplaneLinearLocalPlannerStatus*>(
               &_AirplaneLinearLocalPlannerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AirplaneLinearLocalPlannerStatus* other);
  friend void swap(AirplaneLinearLocalPlannerStatus& a, AirplaneLinearLocalPlannerStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AirplaneLinearLocalPlannerStatus* New() const final {
    return CreateMaybeMessage<AirplaneLinearLocalPlannerStatus>(NULL);
  }

  AirplaneLinearLocalPlannerStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AirplaneLinearLocalPlannerStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AirplaneLinearLocalPlannerStatus& from);
  void MergeFrom(const AirplaneLinearLocalPlannerStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirplaneLinearLocalPlannerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double heading_target = 1;
  void clear_heading_target();
  static const int kHeadingTargetFieldNumber = 1;
  double heading_target() const;
  void set_heading_target(double value);

  // @@protoc_insertion_point(class_scope:AirplaneLinearLocalPlannerStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double heading_target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocalPlanner_2eproto;
};
// -------------------------------------------------------------------

class LinearLocalPlannerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinearLocalPlannerStatus) */ {
 public:
  LinearLocalPlannerStatus();
  virtual ~LinearLocalPlannerStatus();

  LinearLocalPlannerStatus(const LinearLocalPlannerStatus& from);

  inline LinearLocalPlannerStatus& operator=(const LinearLocalPlannerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinearLocalPlannerStatus(LinearLocalPlannerStatus&& from) noexcept
    : LinearLocalPlannerStatus() {
    *this = ::std::move(from);
  }

  inline LinearLocalPlannerStatus& operator=(LinearLocalPlannerStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LinearLocalPlannerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinearLocalPlannerStatus* internal_default_instance() {
    return reinterpret_cast<const LinearLocalPlannerStatus*>(
               &_LinearLocalPlannerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LinearLocalPlannerStatus* other);
  friend void swap(LinearLocalPlannerStatus& a, LinearLocalPlannerStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinearLocalPlannerStatus* New() const final {
    return CreateMaybeMessage<LinearLocalPlannerStatus>(NULL);
  }

  LinearLocalPlannerStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinearLocalPlannerStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinearLocalPlannerStatus& from);
  void MergeFrom(const LinearLocalPlannerStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearLocalPlannerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AirplaneLinearLocalPlannerStatus airplane_status = 1;
  bool has_airplane_status() const;
  void clear_airplane_status();
  static const int kAirplaneStatusFieldNumber = 1;
  const ::AirplaneLinearLocalPlannerStatus& airplane_status() const;
  ::AirplaneLinearLocalPlannerStatus* release_airplane_status();
  ::AirplaneLinearLocalPlannerStatus* mutable_airplane_status();
  void set_allocated_airplane_status(::AirplaneLinearLocalPlannerStatus* airplane_status);

  // .VelocityBody velocity_target = 3;
  bool has_velocity_target() const;
  void clear_velocity_target();
  static const int kVelocityTargetFieldNumber = 3;
  const ::VelocityBody& velocity_target() const;
  ::VelocityBody* release_velocity_target();
  ::VelocityBody* mutable_velocity_target();
  void set_allocated_velocity_target(::VelocityBody* velocity_target);

  // uint32 current_path_section = 2;
  void clear_current_path_section();
  static const int kCurrentPathSectionFieldNumber = 2;
  ::google::protobuf::uint32 current_path_section() const;
  void set_current_path_section(::google::protobuf::uint32 value);

  // bool is_in_approach = 5;
  void clear_is_in_approach();
  static const int kIsInApproachFieldNumber = 5;
  bool is_in_approach() const;
  void set_is_in_approach(bool value);

  // double yaw_rate_target = 4;
  void clear_yaw_rate_target();
  static const int kYawRateTargetFieldNumber = 4;
  double yaw_rate_target() const;
  void set_yaw_rate_target(double value);

  // @@protoc_insertion_point(class_scope:LinearLocalPlannerStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AirplaneLinearLocalPlannerStatus* airplane_status_;
  ::VelocityBody* velocity_target_;
  ::google::protobuf::uint32 current_path_section_;
  bool is_in_approach_;
  double yaw_rate_target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocalPlanner_2eproto;
};
// -------------------------------------------------------------------

class ManeuverLocalPlannerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ManeuverLocalPlannerStatus) */ {
 public:
  ManeuverLocalPlannerStatus();
  virtual ~ManeuverLocalPlannerStatus();

  ManeuverLocalPlannerStatus(const ManeuverLocalPlannerStatus& from);

  inline ManeuverLocalPlannerStatus& operator=(const ManeuverLocalPlannerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ManeuverLocalPlannerStatus(ManeuverLocalPlannerStatus&& from) noexcept
    : ManeuverLocalPlannerStatus() {
    *this = ::std::move(from);
  }

  inline ManeuverLocalPlannerStatus& operator=(ManeuverLocalPlannerStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ManeuverLocalPlannerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManeuverLocalPlannerStatus* internal_default_instance() {
    return reinterpret_cast<const ManeuverLocalPlannerStatus*>(
               &_ManeuverLocalPlannerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ManeuverLocalPlannerStatus* other);
  friend void swap(ManeuverLocalPlannerStatus& a, ManeuverLocalPlannerStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ManeuverLocalPlannerStatus* New() const final {
    return CreateMaybeMessage<ManeuverLocalPlannerStatus>(NULL);
  }

  ManeuverLocalPlannerStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ManeuverLocalPlannerStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ManeuverLocalPlannerStatus& from);
  void MergeFrom(const ManeuverLocalPlannerStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManeuverLocalPlannerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double velocity_target = 2;
  void clear_velocity_target();
  static const int kVelocityTargetFieldNumber = 2;
  double velocity_target() const;
  void set_velocity_target(double value);

  // double yaw_rate_target = 3;
  void clear_yaw_rate_target();
  static const int kYawRateTargetFieldNumber = 3;
  double yaw_rate_target() const;
  void set_yaw_rate_target(double value);

  // uint32 current_path_section = 1;
  void clear_current_path_section();
  static const int kCurrentPathSectionFieldNumber = 1;
  ::google::protobuf::uint32 current_path_section() const;
  void set_current_path_section(::google::protobuf::uint32 value);

  // bool is_in_approach = 6;
  void clear_is_in_approach();
  static const int kIsInApproachFieldNumber = 6;
  bool is_in_approach() const;
  void set_is_in_approach(bool value);

  // double climb_angle_target = 4;
  void clear_climb_angle_target();
  static const int kClimbAngleTargetFieldNumber = 4;
  double climb_angle_target() const;
  void set_climb_angle_target(double value);

  // double heading_target = 5;
  void clear_heading_target();
  static const int kHeadingTargetFieldNumber = 5;
  double heading_target() const;
  void set_heading_target(double value);

  // @@protoc_insertion_point(class_scope:ManeuverLocalPlannerStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double velocity_target_;
  double yaw_rate_target_;
  ::google::protobuf::uint32 current_path_section_;
  bool is_in_approach_;
  double climb_angle_target_;
  double heading_target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocalPlanner_2eproto;
};
// -------------------------------------------------------------------

class LocalPlannerStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LocalPlannerStatus) */ {
 public:
  LocalPlannerStatus();
  virtual ~LocalPlannerStatus();

  LocalPlannerStatus(const LocalPlannerStatus& from);

  inline LocalPlannerStatus& operator=(const LocalPlannerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalPlannerStatus(LocalPlannerStatus&& from) noexcept
    : LocalPlannerStatus() {
    *this = ::std::move(from);
  }

  inline LocalPlannerStatus& operator=(LocalPlannerStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LocalPlannerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPlannerStatus* internal_default_instance() {
    return reinterpret_cast<const LocalPlannerStatus*>(
               &_LocalPlannerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LocalPlannerStatus* other);
  friend void swap(LocalPlannerStatus& a, LocalPlannerStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalPlannerStatus* New() const final {
    return CreateMaybeMessage<LocalPlannerStatus>(NULL);
  }

  LocalPlannerStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocalPlannerStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LocalPlannerStatus& from);
  void MergeFrom(const LocalPlannerStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalPlannerStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LinearLocalPlannerStatus linear_status = 1;
  bool has_linear_status() const;
  void clear_linear_status();
  static const int kLinearStatusFieldNumber = 1;
  const ::LinearLocalPlannerStatus& linear_status() const;
  ::LinearLocalPlannerStatus* release_linear_status();
  ::LinearLocalPlannerStatus* mutable_linear_status();
  void set_allocated_linear_status(::LinearLocalPlannerStatus* linear_status);

  // .ManeuverLocalPlannerStatus maneuver_status = 2;
  bool has_maneuver_status() const;
  void clear_maneuver_status();
  static const int kManeuverStatusFieldNumber = 2;
  const ::ManeuverLocalPlannerStatus& maneuver_status() const;
  ::ManeuverLocalPlannerStatus* release_maneuver_status();
  ::ManeuverLocalPlannerStatus* mutable_maneuver_status();
  void set_allocated_maneuver_status(::ManeuverLocalPlannerStatus* maneuver_status);

  // @@protoc_insertion_point(class_scope:LocalPlannerStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LinearLocalPlannerStatus* linear_status_;
  ::ManeuverLocalPlannerStatus* maneuver_status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocalPlanner_2eproto;
};
// -------------------------------------------------------------------

class AirplaneLinearLocalPlannerParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AirplaneLinearLocalPlannerParams) */ {
 public:
  AirplaneLinearLocalPlannerParams();
  virtual ~AirplaneLinearLocalPlannerParams();

  AirplaneLinearLocalPlannerParams(const AirplaneLinearLocalPlannerParams& from);

  inline AirplaneLinearLocalPlannerParams& operator=(const AirplaneLinearLocalPlannerParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AirplaneLinearLocalPlannerParams(AirplaneLinearLocalPlannerParams&& from) noexcept
    : AirplaneLinearLocalPlannerParams() {
    *this = ::std::move(from);
  }

  inline AirplaneLinearLocalPlannerParams& operator=(AirplaneLinearLocalPlannerParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AirplaneLinearLocalPlannerParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AirplaneLinearLocalPlannerParams* internal_default_instance() {
    return reinterpret_cast<const AirplaneLinearLocalPlannerParams*>(
               &_AirplaneLinearLocalPlannerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(AirplaneLinearLocalPlannerParams* other);
  friend void swap(AirplaneLinearLocalPlannerParams& a, AirplaneLinearLocalPlannerParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AirplaneLinearLocalPlannerParams* New() const final {
    return CreateMaybeMessage<AirplaneLinearLocalPlannerParams>(NULL);
  }

  AirplaneLinearLocalPlannerParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AirplaneLinearLocalPlannerParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AirplaneLinearLocalPlannerParams& from);
  void MergeFrom(const AirplaneLinearLocalPlannerParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirplaneLinearLocalPlannerParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double k_altitude = 1;
  void clear_k_altitude();
  static const int kKAltitudeFieldNumber = 1;
  double k_altitude() const;
  void set_k_altitude(double value);

  // double k_heading = 2;
  void clear_k_heading();
  static const int kKHeadingFieldNumber = 2;
  double k_heading() const;
  void set_k_heading(double value);

  // double k_yaw_rate = 3;
  void clear_k_yaw_rate();
  static const int kKYawRateFieldNumber = 3;
  double k_yaw_rate() const;
  void set_k_yaw_rate(double value);

  // @@protoc_insertion_point(class_scope:AirplaneLinearLocalPlannerParams)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double k_altitude_;
  double k_heading_;
  double k_yaw_rate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocalPlanner_2eproto;
};
// -------------------------------------------------------------------

class LinearLocalPlannerParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LinearLocalPlannerParams) */ {
 public:
  LinearLocalPlannerParams();
  virtual ~LinearLocalPlannerParams();

  LinearLocalPlannerParams(const LinearLocalPlannerParams& from);

  inline LinearLocalPlannerParams& operator=(const LinearLocalPlannerParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LinearLocalPlannerParams(LinearLocalPlannerParams&& from) noexcept
    : LinearLocalPlannerParams() {
    *this = ::std::move(from);
  }

  inline LinearLocalPlannerParams& operator=(LinearLocalPlannerParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LinearLocalPlannerParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinearLocalPlannerParams* internal_default_instance() {
    return reinterpret_cast<const LinearLocalPlannerParams*>(
               &_LinearLocalPlannerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LinearLocalPlannerParams* other);
  friend void swap(LinearLocalPlannerParams& a, LinearLocalPlannerParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LinearLocalPlannerParams* New() const final {
    return CreateMaybeMessage<LinearLocalPlannerParams>(NULL);
  }

  LinearLocalPlannerParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LinearLocalPlannerParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LinearLocalPlannerParams& from);
  void MergeFrom(const LinearLocalPlannerParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearLocalPlannerParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .AirplaneLinearLocalPlannerParams airplane_params = 1;
  bool has_airplane_params() const;
  void clear_airplane_params();
  static const int kAirplaneParamsFieldNumber = 1;
  const ::AirplaneLinearLocalPlannerParams& airplane_params() const;
  ::AirplaneLinearLocalPlannerParams* release_airplane_params();
  ::AirplaneLinearLocalPlannerParams* mutable_airplane_params();
  void set_allocated_airplane_params(::AirplaneLinearLocalPlannerParams* airplane_params);

  // @@protoc_insertion_point(class_scope:LinearLocalPlannerParams)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::AirplaneLinearLocalPlannerParams* airplane_params_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocalPlanner_2eproto;
};
// -------------------------------------------------------------------

class ManeuverLocalPlannerParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ManeuverLocalPlannerParams) */ {
 public:
  ManeuverLocalPlannerParams();
  virtual ~ManeuverLocalPlannerParams();

  ManeuverLocalPlannerParams(const ManeuverLocalPlannerParams& from);

  inline ManeuverLocalPlannerParams& operator=(const ManeuverLocalPlannerParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ManeuverLocalPlannerParams(ManeuverLocalPlannerParams&& from) noexcept
    : ManeuverLocalPlannerParams() {
    *this = ::std::move(from);
  }

  inline ManeuverLocalPlannerParams& operator=(ManeuverLocalPlannerParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ManeuverLocalPlannerParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManeuverLocalPlannerParams* internal_default_instance() {
    return reinterpret_cast<const ManeuverLocalPlannerParams*>(
               &_ManeuverLocalPlannerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ManeuverLocalPlannerParams* other);
  friend void swap(ManeuverLocalPlannerParams& a, ManeuverLocalPlannerParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ManeuverLocalPlannerParams* New() const final {
    return CreateMaybeMessage<ManeuverLocalPlannerParams>(NULL);
  }

  ManeuverLocalPlannerParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ManeuverLocalPlannerParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ManeuverLocalPlannerParams& from);
  void MergeFrom(const ManeuverLocalPlannerParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManeuverLocalPlannerParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double k_altitude = 1;
  void clear_k_altitude();
  static const int kKAltitudeFieldNumber = 1;
  double k_altitude() const;
  void set_k_altitude(double value);

  // double k_convergence = 2;
  void clear_k_convergence();
  static const int kKConvergenceFieldNumber = 2;
  double k_convergence() const;
  void set_k_convergence(double value);

  // double k_yaw_rate = 3;
  void clear_k_yaw_rate();
  static const int kKYawRateFieldNumber = 3;
  double k_yaw_rate() const;
  void set_k_yaw_rate(double value);

  // @@protoc_insertion_point(class_scope:ManeuverLocalPlannerParams)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double k_altitude_;
  double k_convergence_;
  double k_yaw_rate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocalPlanner_2eproto;
};
// -------------------------------------------------------------------

class LocalPlannerParams : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LocalPlannerParams) */ {
 public:
  LocalPlannerParams();
  virtual ~LocalPlannerParams();

  LocalPlannerParams(const LocalPlannerParams& from);

  inline LocalPlannerParams& operator=(const LocalPlannerParams& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalPlannerParams(LocalPlannerParams&& from) noexcept
    : LocalPlannerParams() {
    *this = ::std::move(from);
  }

  inline LocalPlannerParams& operator=(LocalPlannerParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LocalPlannerParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalPlannerParams* internal_default_instance() {
    return reinterpret_cast<const LocalPlannerParams*>(
               &_LocalPlannerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LocalPlannerParams* other);
  friend void swap(LocalPlannerParams& a, LocalPlannerParams& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalPlannerParams* New() const final {
    return CreateMaybeMessage<LocalPlannerParams>(NULL);
  }

  LocalPlannerParams* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocalPlannerParams>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LocalPlannerParams& from);
  void MergeFrom(const LocalPlannerParams& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalPlannerParams* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LinearLocalPlannerParams linear_params = 1;
  bool has_linear_params() const;
  void clear_linear_params();
  static const int kLinearParamsFieldNumber = 1;
  const ::LinearLocalPlannerParams& linear_params() const;
  ::LinearLocalPlannerParams* release_linear_params();
  ::LinearLocalPlannerParams* mutable_linear_params();
  void set_allocated_linear_params(::LinearLocalPlannerParams* linear_params);

  // .ManeuverLocalPlannerParams maneuver_params = 2;
  bool has_maneuver_params() const;
  void clear_maneuver_params();
  static const int kManeuverParamsFieldNumber = 2;
  const ::ManeuverLocalPlannerParams& maneuver_params() const;
  ::ManeuverLocalPlannerParams* release_maneuver_params();
  ::ManeuverLocalPlannerParams* mutable_maneuver_params();
  void set_allocated_maneuver_params(::ManeuverLocalPlannerParams* maneuver_params);

  // @@protoc_insertion_point(class_scope:LocalPlannerParams)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LinearLocalPlannerParams* linear_params_;
  ::ManeuverLocalPlannerParams* maneuver_params_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LocalPlanner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AirplaneLinearLocalPlannerStatus

// double heading_target = 1;
inline void AirplaneLinearLocalPlannerStatus::clear_heading_target() {
  heading_target_ = 0;
}
inline double AirplaneLinearLocalPlannerStatus::heading_target() const {
  // @@protoc_insertion_point(field_get:AirplaneLinearLocalPlannerStatus.heading_target)
  return heading_target_;
}
inline void AirplaneLinearLocalPlannerStatus::set_heading_target(double value) {
  
  heading_target_ = value;
  // @@protoc_insertion_point(field_set:AirplaneLinearLocalPlannerStatus.heading_target)
}

// -------------------------------------------------------------------

// LinearLocalPlannerStatus

// .AirplaneLinearLocalPlannerStatus airplane_status = 1;
inline bool LinearLocalPlannerStatus::has_airplane_status() const {
  return this != internal_default_instance() && airplane_status_ != NULL;
}
inline void LinearLocalPlannerStatus::clear_airplane_status() {
  if (GetArenaNoVirtual() == NULL && airplane_status_ != NULL) {
    delete airplane_status_;
  }
  airplane_status_ = NULL;
}
inline const ::AirplaneLinearLocalPlannerStatus& LinearLocalPlannerStatus::airplane_status() const {
  const ::AirplaneLinearLocalPlannerStatus* p = airplane_status_;
  // @@protoc_insertion_point(field_get:LinearLocalPlannerStatus.airplane_status)
  return p != NULL ? *p : *reinterpret_cast<const ::AirplaneLinearLocalPlannerStatus*>(
      &::_AirplaneLinearLocalPlannerStatus_default_instance_);
}
inline ::AirplaneLinearLocalPlannerStatus* LinearLocalPlannerStatus::release_airplane_status() {
  // @@protoc_insertion_point(field_release:LinearLocalPlannerStatus.airplane_status)
  
  ::AirplaneLinearLocalPlannerStatus* temp = airplane_status_;
  airplane_status_ = NULL;
  return temp;
}
inline ::AirplaneLinearLocalPlannerStatus* LinearLocalPlannerStatus::mutable_airplane_status() {
  
  if (airplane_status_ == NULL) {
    auto* p = CreateMaybeMessage<::AirplaneLinearLocalPlannerStatus>(GetArenaNoVirtual());
    airplane_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LinearLocalPlannerStatus.airplane_status)
  return airplane_status_;
}
inline void LinearLocalPlannerStatus::set_allocated_airplane_status(::AirplaneLinearLocalPlannerStatus* airplane_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete airplane_status_;
  }
  if (airplane_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      airplane_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, airplane_status, submessage_arena);
    }
    
  } else {
    
  }
  airplane_status_ = airplane_status;
  // @@protoc_insertion_point(field_set_allocated:LinearLocalPlannerStatus.airplane_status)
}

// uint32 current_path_section = 2;
inline void LinearLocalPlannerStatus::clear_current_path_section() {
  current_path_section_ = 0u;
}
inline ::google::protobuf::uint32 LinearLocalPlannerStatus::current_path_section() const {
  // @@protoc_insertion_point(field_get:LinearLocalPlannerStatus.current_path_section)
  return current_path_section_;
}
inline void LinearLocalPlannerStatus::set_current_path_section(::google::protobuf::uint32 value) {
  
  current_path_section_ = value;
  // @@protoc_insertion_point(field_set:LinearLocalPlannerStatus.current_path_section)
}

// .VelocityBody velocity_target = 3;
inline bool LinearLocalPlannerStatus::has_velocity_target() const {
  return this != internal_default_instance() && velocity_target_ != NULL;
}
inline const ::VelocityBody& LinearLocalPlannerStatus::velocity_target() const {
  const ::VelocityBody* p = velocity_target_;
  // @@protoc_insertion_point(field_get:LinearLocalPlannerStatus.velocity_target)
  return p != NULL ? *p : *reinterpret_cast<const ::VelocityBody*>(
      &::_VelocityBody_default_instance_);
}
inline ::VelocityBody* LinearLocalPlannerStatus::release_velocity_target() {
  // @@protoc_insertion_point(field_release:LinearLocalPlannerStatus.velocity_target)
  
  ::VelocityBody* temp = velocity_target_;
  velocity_target_ = NULL;
  return temp;
}
inline ::VelocityBody* LinearLocalPlannerStatus::mutable_velocity_target() {
  
  if (velocity_target_ == NULL) {
    auto* p = CreateMaybeMessage<::VelocityBody>(GetArenaNoVirtual());
    velocity_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LinearLocalPlannerStatus.velocity_target)
  return velocity_target_;
}
inline void LinearLocalPlannerStatus::set_allocated_velocity_target(::VelocityBody* velocity_target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(velocity_target_);
  }
  if (velocity_target) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity_target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity_target, submessage_arena);
    }
    
  } else {
    
  }
  velocity_target_ = velocity_target;
  // @@protoc_insertion_point(field_set_allocated:LinearLocalPlannerStatus.velocity_target)
}

// double yaw_rate_target = 4;
inline void LinearLocalPlannerStatus::clear_yaw_rate_target() {
  yaw_rate_target_ = 0;
}
inline double LinearLocalPlannerStatus::yaw_rate_target() const {
  // @@protoc_insertion_point(field_get:LinearLocalPlannerStatus.yaw_rate_target)
  return yaw_rate_target_;
}
inline void LinearLocalPlannerStatus::set_yaw_rate_target(double value) {
  
  yaw_rate_target_ = value;
  // @@protoc_insertion_point(field_set:LinearLocalPlannerStatus.yaw_rate_target)
}

// bool is_in_approach = 5;
inline void LinearLocalPlannerStatus::clear_is_in_approach() {
  is_in_approach_ = false;
}
inline bool LinearLocalPlannerStatus::is_in_approach() const {
  // @@protoc_insertion_point(field_get:LinearLocalPlannerStatus.is_in_approach)
  return is_in_approach_;
}
inline void LinearLocalPlannerStatus::set_is_in_approach(bool value) {
  
  is_in_approach_ = value;
  // @@protoc_insertion_point(field_set:LinearLocalPlannerStatus.is_in_approach)
}

// -------------------------------------------------------------------

// ManeuverLocalPlannerStatus

// uint32 current_path_section = 1;
inline void ManeuverLocalPlannerStatus::clear_current_path_section() {
  current_path_section_ = 0u;
}
inline ::google::protobuf::uint32 ManeuverLocalPlannerStatus::current_path_section() const {
  // @@protoc_insertion_point(field_get:ManeuverLocalPlannerStatus.current_path_section)
  return current_path_section_;
}
inline void ManeuverLocalPlannerStatus::set_current_path_section(::google::protobuf::uint32 value) {
  
  current_path_section_ = value;
  // @@protoc_insertion_point(field_set:ManeuverLocalPlannerStatus.current_path_section)
}

// double velocity_target = 2;
inline void ManeuverLocalPlannerStatus::clear_velocity_target() {
  velocity_target_ = 0;
}
inline double ManeuverLocalPlannerStatus::velocity_target() const {
  // @@protoc_insertion_point(field_get:ManeuverLocalPlannerStatus.velocity_target)
  return velocity_target_;
}
inline void ManeuverLocalPlannerStatus::set_velocity_target(double value) {
  
  velocity_target_ = value;
  // @@protoc_insertion_point(field_set:ManeuverLocalPlannerStatus.velocity_target)
}

// double yaw_rate_target = 3;
inline void ManeuverLocalPlannerStatus::clear_yaw_rate_target() {
  yaw_rate_target_ = 0;
}
inline double ManeuverLocalPlannerStatus::yaw_rate_target() const {
  // @@protoc_insertion_point(field_get:ManeuverLocalPlannerStatus.yaw_rate_target)
  return yaw_rate_target_;
}
inline void ManeuverLocalPlannerStatus::set_yaw_rate_target(double value) {
  
  yaw_rate_target_ = value;
  // @@protoc_insertion_point(field_set:ManeuverLocalPlannerStatus.yaw_rate_target)
}

// double climb_angle_target = 4;
inline void ManeuverLocalPlannerStatus::clear_climb_angle_target() {
  climb_angle_target_ = 0;
}
inline double ManeuverLocalPlannerStatus::climb_angle_target() const {
  // @@protoc_insertion_point(field_get:ManeuverLocalPlannerStatus.climb_angle_target)
  return climb_angle_target_;
}
inline void ManeuverLocalPlannerStatus::set_climb_angle_target(double value) {
  
  climb_angle_target_ = value;
  // @@protoc_insertion_point(field_set:ManeuverLocalPlannerStatus.climb_angle_target)
}

// double heading_target = 5;
inline void ManeuverLocalPlannerStatus::clear_heading_target() {
  heading_target_ = 0;
}
inline double ManeuverLocalPlannerStatus::heading_target() const {
  // @@protoc_insertion_point(field_get:ManeuverLocalPlannerStatus.heading_target)
  return heading_target_;
}
inline void ManeuverLocalPlannerStatus::set_heading_target(double value) {
  
  heading_target_ = value;
  // @@protoc_insertion_point(field_set:ManeuverLocalPlannerStatus.heading_target)
}

// bool is_in_approach = 6;
inline void ManeuverLocalPlannerStatus::clear_is_in_approach() {
  is_in_approach_ = false;
}
inline bool ManeuverLocalPlannerStatus::is_in_approach() const {
  // @@protoc_insertion_point(field_get:ManeuverLocalPlannerStatus.is_in_approach)
  return is_in_approach_;
}
inline void ManeuverLocalPlannerStatus::set_is_in_approach(bool value) {
  
  is_in_approach_ = value;
  // @@protoc_insertion_point(field_set:ManeuverLocalPlannerStatus.is_in_approach)
}

// -------------------------------------------------------------------

// LocalPlannerStatus

// .LinearLocalPlannerStatus linear_status = 1;
inline bool LocalPlannerStatus::has_linear_status() const {
  return this != internal_default_instance() && linear_status_ != NULL;
}
inline void LocalPlannerStatus::clear_linear_status() {
  if (GetArenaNoVirtual() == NULL && linear_status_ != NULL) {
    delete linear_status_;
  }
  linear_status_ = NULL;
}
inline const ::LinearLocalPlannerStatus& LocalPlannerStatus::linear_status() const {
  const ::LinearLocalPlannerStatus* p = linear_status_;
  // @@protoc_insertion_point(field_get:LocalPlannerStatus.linear_status)
  return p != NULL ? *p : *reinterpret_cast<const ::LinearLocalPlannerStatus*>(
      &::_LinearLocalPlannerStatus_default_instance_);
}
inline ::LinearLocalPlannerStatus* LocalPlannerStatus::release_linear_status() {
  // @@protoc_insertion_point(field_release:LocalPlannerStatus.linear_status)
  
  ::LinearLocalPlannerStatus* temp = linear_status_;
  linear_status_ = NULL;
  return temp;
}
inline ::LinearLocalPlannerStatus* LocalPlannerStatus::mutable_linear_status() {
  
  if (linear_status_ == NULL) {
    auto* p = CreateMaybeMessage<::LinearLocalPlannerStatus>(GetArenaNoVirtual());
    linear_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LocalPlannerStatus.linear_status)
  return linear_status_;
}
inline void LocalPlannerStatus::set_allocated_linear_status(::LinearLocalPlannerStatus* linear_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete linear_status_;
  }
  if (linear_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_status, submessage_arena);
    }
    
  } else {
    
  }
  linear_status_ = linear_status;
  // @@protoc_insertion_point(field_set_allocated:LocalPlannerStatus.linear_status)
}

// .ManeuverLocalPlannerStatus maneuver_status = 2;
inline bool LocalPlannerStatus::has_maneuver_status() const {
  return this != internal_default_instance() && maneuver_status_ != NULL;
}
inline void LocalPlannerStatus::clear_maneuver_status() {
  if (GetArenaNoVirtual() == NULL && maneuver_status_ != NULL) {
    delete maneuver_status_;
  }
  maneuver_status_ = NULL;
}
inline const ::ManeuverLocalPlannerStatus& LocalPlannerStatus::maneuver_status() const {
  const ::ManeuverLocalPlannerStatus* p = maneuver_status_;
  // @@protoc_insertion_point(field_get:LocalPlannerStatus.maneuver_status)
  return p != NULL ? *p : *reinterpret_cast<const ::ManeuverLocalPlannerStatus*>(
      &::_ManeuverLocalPlannerStatus_default_instance_);
}
inline ::ManeuverLocalPlannerStatus* LocalPlannerStatus::release_maneuver_status() {
  // @@protoc_insertion_point(field_release:LocalPlannerStatus.maneuver_status)
  
  ::ManeuverLocalPlannerStatus* temp = maneuver_status_;
  maneuver_status_ = NULL;
  return temp;
}
inline ::ManeuverLocalPlannerStatus* LocalPlannerStatus::mutable_maneuver_status() {
  
  if (maneuver_status_ == NULL) {
    auto* p = CreateMaybeMessage<::ManeuverLocalPlannerStatus>(GetArenaNoVirtual());
    maneuver_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LocalPlannerStatus.maneuver_status)
  return maneuver_status_;
}
inline void LocalPlannerStatus::set_allocated_maneuver_status(::ManeuverLocalPlannerStatus* maneuver_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete maneuver_status_;
  }
  if (maneuver_status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      maneuver_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, maneuver_status, submessage_arena);
    }
    
  } else {
    
  }
  maneuver_status_ = maneuver_status;
  // @@protoc_insertion_point(field_set_allocated:LocalPlannerStatus.maneuver_status)
}

// -------------------------------------------------------------------

// AirplaneLinearLocalPlannerParams

// double k_altitude = 1;
inline void AirplaneLinearLocalPlannerParams::clear_k_altitude() {
  k_altitude_ = 0;
}
inline double AirplaneLinearLocalPlannerParams::k_altitude() const {
  // @@protoc_insertion_point(field_get:AirplaneLinearLocalPlannerParams.k_altitude)
  return k_altitude_;
}
inline void AirplaneLinearLocalPlannerParams::set_k_altitude(double value) {
  
  k_altitude_ = value;
  // @@protoc_insertion_point(field_set:AirplaneLinearLocalPlannerParams.k_altitude)
}

// double k_heading = 2;
inline void AirplaneLinearLocalPlannerParams::clear_k_heading() {
  k_heading_ = 0;
}
inline double AirplaneLinearLocalPlannerParams::k_heading() const {
  // @@protoc_insertion_point(field_get:AirplaneLinearLocalPlannerParams.k_heading)
  return k_heading_;
}
inline void AirplaneLinearLocalPlannerParams::set_k_heading(double value) {
  
  k_heading_ = value;
  // @@protoc_insertion_point(field_set:AirplaneLinearLocalPlannerParams.k_heading)
}

// double k_yaw_rate = 3;
inline void AirplaneLinearLocalPlannerParams::clear_k_yaw_rate() {
  k_yaw_rate_ = 0;
}
inline double AirplaneLinearLocalPlannerParams::k_yaw_rate() const {
  // @@protoc_insertion_point(field_get:AirplaneLinearLocalPlannerParams.k_yaw_rate)
  return k_yaw_rate_;
}
inline void AirplaneLinearLocalPlannerParams::set_k_yaw_rate(double value) {
  
  k_yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:AirplaneLinearLocalPlannerParams.k_yaw_rate)
}

// -------------------------------------------------------------------

// LinearLocalPlannerParams

// .AirplaneLinearLocalPlannerParams airplane_params = 1;
inline bool LinearLocalPlannerParams::has_airplane_params() const {
  return this != internal_default_instance() && airplane_params_ != NULL;
}
inline void LinearLocalPlannerParams::clear_airplane_params() {
  if (GetArenaNoVirtual() == NULL && airplane_params_ != NULL) {
    delete airplane_params_;
  }
  airplane_params_ = NULL;
}
inline const ::AirplaneLinearLocalPlannerParams& LinearLocalPlannerParams::airplane_params() const {
  const ::AirplaneLinearLocalPlannerParams* p = airplane_params_;
  // @@protoc_insertion_point(field_get:LinearLocalPlannerParams.airplane_params)
  return p != NULL ? *p : *reinterpret_cast<const ::AirplaneLinearLocalPlannerParams*>(
      &::_AirplaneLinearLocalPlannerParams_default_instance_);
}
inline ::AirplaneLinearLocalPlannerParams* LinearLocalPlannerParams::release_airplane_params() {
  // @@protoc_insertion_point(field_release:LinearLocalPlannerParams.airplane_params)
  
  ::AirplaneLinearLocalPlannerParams* temp = airplane_params_;
  airplane_params_ = NULL;
  return temp;
}
inline ::AirplaneLinearLocalPlannerParams* LinearLocalPlannerParams::mutable_airplane_params() {
  
  if (airplane_params_ == NULL) {
    auto* p = CreateMaybeMessage<::AirplaneLinearLocalPlannerParams>(GetArenaNoVirtual());
    airplane_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LinearLocalPlannerParams.airplane_params)
  return airplane_params_;
}
inline void LinearLocalPlannerParams::set_allocated_airplane_params(::AirplaneLinearLocalPlannerParams* airplane_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete airplane_params_;
  }
  if (airplane_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      airplane_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, airplane_params, submessage_arena);
    }
    
  } else {
    
  }
  airplane_params_ = airplane_params;
  // @@protoc_insertion_point(field_set_allocated:LinearLocalPlannerParams.airplane_params)
}

// -------------------------------------------------------------------

// ManeuverLocalPlannerParams

// double k_altitude = 1;
inline void ManeuverLocalPlannerParams::clear_k_altitude() {
  k_altitude_ = 0;
}
inline double ManeuverLocalPlannerParams::k_altitude() const {
  // @@protoc_insertion_point(field_get:ManeuverLocalPlannerParams.k_altitude)
  return k_altitude_;
}
inline void ManeuverLocalPlannerParams::set_k_altitude(double value) {
  
  k_altitude_ = value;
  // @@protoc_insertion_point(field_set:ManeuverLocalPlannerParams.k_altitude)
}

// double k_convergence = 2;
inline void ManeuverLocalPlannerParams::clear_k_convergence() {
  k_convergence_ = 0;
}
inline double ManeuverLocalPlannerParams::k_convergence() const {
  // @@protoc_insertion_point(field_get:ManeuverLocalPlannerParams.k_convergence)
  return k_convergence_;
}
inline void ManeuverLocalPlannerParams::set_k_convergence(double value) {
  
  k_convergence_ = value;
  // @@protoc_insertion_point(field_set:ManeuverLocalPlannerParams.k_convergence)
}

// double k_yaw_rate = 3;
inline void ManeuverLocalPlannerParams::clear_k_yaw_rate() {
  k_yaw_rate_ = 0;
}
inline double ManeuverLocalPlannerParams::k_yaw_rate() const {
  // @@protoc_insertion_point(field_get:ManeuverLocalPlannerParams.k_yaw_rate)
  return k_yaw_rate_;
}
inline void ManeuverLocalPlannerParams::set_k_yaw_rate(double value) {
  
  k_yaw_rate_ = value;
  // @@protoc_insertion_point(field_set:ManeuverLocalPlannerParams.k_yaw_rate)
}

// -------------------------------------------------------------------

// LocalPlannerParams

// .LinearLocalPlannerParams linear_params = 1;
inline bool LocalPlannerParams::has_linear_params() const {
  return this != internal_default_instance() && linear_params_ != NULL;
}
inline void LocalPlannerParams::clear_linear_params() {
  if (GetArenaNoVirtual() == NULL && linear_params_ != NULL) {
    delete linear_params_;
  }
  linear_params_ = NULL;
}
inline const ::LinearLocalPlannerParams& LocalPlannerParams::linear_params() const {
  const ::LinearLocalPlannerParams* p = linear_params_;
  // @@protoc_insertion_point(field_get:LocalPlannerParams.linear_params)
  return p != NULL ? *p : *reinterpret_cast<const ::LinearLocalPlannerParams*>(
      &::_LinearLocalPlannerParams_default_instance_);
}
inline ::LinearLocalPlannerParams* LocalPlannerParams::release_linear_params() {
  // @@protoc_insertion_point(field_release:LocalPlannerParams.linear_params)
  
  ::LinearLocalPlannerParams* temp = linear_params_;
  linear_params_ = NULL;
  return temp;
}
inline ::LinearLocalPlannerParams* LocalPlannerParams::mutable_linear_params() {
  
  if (linear_params_ == NULL) {
    auto* p = CreateMaybeMessage<::LinearLocalPlannerParams>(GetArenaNoVirtual());
    linear_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LocalPlannerParams.linear_params)
  return linear_params_;
}
inline void LocalPlannerParams::set_allocated_linear_params(::LinearLocalPlannerParams* linear_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete linear_params_;
  }
  if (linear_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      linear_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, linear_params, submessage_arena);
    }
    
  } else {
    
  }
  linear_params_ = linear_params;
  // @@protoc_insertion_point(field_set_allocated:LocalPlannerParams.linear_params)
}

// .ManeuverLocalPlannerParams maneuver_params = 2;
inline bool LocalPlannerParams::has_maneuver_params() const {
  return this != internal_default_instance() && maneuver_params_ != NULL;
}
inline void LocalPlannerParams::clear_maneuver_params() {
  if (GetArenaNoVirtual() == NULL && maneuver_params_ != NULL) {
    delete maneuver_params_;
  }
  maneuver_params_ = NULL;
}
inline const ::ManeuverLocalPlannerParams& LocalPlannerParams::maneuver_params() const {
  const ::ManeuverLocalPlannerParams* p = maneuver_params_;
  // @@protoc_insertion_point(field_get:LocalPlannerParams.maneuver_params)
  return p != NULL ? *p : *reinterpret_cast<const ::ManeuverLocalPlannerParams*>(
      &::_ManeuverLocalPlannerParams_default_instance_);
}
inline ::ManeuverLocalPlannerParams* LocalPlannerParams::release_maneuver_params() {
  // @@protoc_insertion_point(field_release:LocalPlannerParams.maneuver_params)
  
  ::ManeuverLocalPlannerParams* temp = maneuver_params_;
  maneuver_params_ = NULL;
  return temp;
}
inline ::ManeuverLocalPlannerParams* LocalPlannerParams::mutable_maneuver_params() {
  
  if (maneuver_params_ == NULL) {
    auto* p = CreateMaybeMessage<::ManeuverLocalPlannerParams>(GetArenaNoVirtual());
    maneuver_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LocalPlannerParams.maneuver_params)
  return maneuver_params_;
}
inline void LocalPlannerParams::set_allocated_maneuver_params(::ManeuverLocalPlannerParams* maneuver_params) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete maneuver_params_;
  }
  if (maneuver_params) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      maneuver_params = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, maneuver_params, submessage_arena);
    }
    
  } else {
    
  }
  maneuver_params_ = maneuver_params;
  // @@protoc_insertion_point(field_set_allocated:LocalPlannerParams.maneuver_params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_LocalPlanner_2eproto
