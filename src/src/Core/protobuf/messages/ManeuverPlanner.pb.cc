// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ManeuverPlanner.proto

#include "ManeuverPlanner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_Shapes_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Rectanguloid_Shapes_2eproto;
class ManeuverPlannerParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ManeuverPlannerParams> _instance;
} _ManeuverPlannerParams_default_instance_;
class ManeuverPlannerStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ManeuverPlannerStatus> _instance;
} _ManeuverPlannerStatus_default_instance_;
static void InitDefaultsManeuverPlannerParams_ManeuverPlanner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ManeuverPlannerParams_default_instance_;
    new (ptr) ::ManeuverPlannerParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ManeuverPlannerParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ManeuverPlannerParams_ManeuverPlanner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsManeuverPlannerParams_ManeuverPlanner_2eproto}, {
      &scc_info_Rectanguloid_Shapes_2eproto.base,}};

static void InitDefaultsManeuverPlannerStatus_ManeuverPlanner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ManeuverPlannerStatus_default_instance_;
    new (ptr) ::ManeuverPlannerStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ManeuverPlannerStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ManeuverPlannerStatus_ManeuverPlanner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsManeuverPlannerStatus_ManeuverPlanner_2eproto}, {}};

void InitDefaults_ManeuverPlanner_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ManeuverPlannerParams_ManeuverPlanner_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ManeuverPlannerStatus_ManeuverPlanner_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_ManeuverPlanner_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_ManeuverPlanner_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_ManeuverPlanner_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_ManeuverPlanner_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ManeuverPlannerParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ManeuverPlannerParams, safety_bounds_),
  PROTOBUF_FIELD_OFFSET(::ManeuverPlannerParams, return_velocity_),
  PROTOBUF_FIELD_OFFSET(::ManeuverPlannerParams, manual_restart_),
  PROTOBUF_FIELD_OFFSET(::ManeuverPlannerParams, maneuver_restart_),
  PROTOBUF_FIELD_OFFSET(::ManeuverPlannerParams, use_safety_bounds_),
  PROTOBUF_FIELD_OFFSET(::ManeuverPlannerParams, perform_in_safety_bounds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ManeuverPlannerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ManeuverPlannerStatus, maneuver_set_active_),
  PROTOBUF_FIELD_OFFSET(::ManeuverPlannerStatus, manual_override_active_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ManeuverPlannerParams)},
  { 11, -1, sizeof(::ManeuverPlannerStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ManeuverPlannerParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ManeuverPlannerStatus_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_ManeuverPlanner_2eproto = {
  {}, AddDescriptors_ManeuverPlanner_2eproto, "ManeuverPlanner.proto", schemas,
  file_default_instances, TableStruct_ManeuverPlanner_2eproto::offsets,
  file_level_metadata_ManeuverPlanner_2eproto, 2, file_level_enum_descriptors_ManeuverPlanner_2eproto, file_level_service_descriptors_ManeuverPlanner_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_ManeuverPlanner_2eproto = {
  false, InitDefaults_ManeuverPlanner_2eproto, 
  "\n\025ManeuverPlanner.proto\032\014Shapes.proto\"\305\001"
  "\n\025ManeuverPlannerParams\022$\n\rsafety_bounds"
  "\030\001 \001(\0132\r.Rectanguloid\022\027\n\017return_velocity"
  "\030\002 \001(\001\022\026\n\016manual_restart\030\003 \001(\010\022\030\n\020maneuv"
  "er_restart\030\004 \001(\010\022\031\n\021use_safety_bounds\030\005 "
  "\001(\010\022 \n\030perform_in_safety_bounds\030\006 \001(\010\"T\n"
  "\025ManeuverPlannerStatus\022\033\n\023maneuver_set_a"
  "ctive\030\001 \001(\010\022\036\n\026manual_override_active\030\002 "
  "\001(\010b\006proto3"
,
  "ManeuverPlanner.proto", &assign_descriptors_table_ManeuverPlanner_2eproto, 331,
};

void AddDescriptors_ManeuverPlanner_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_Shapes_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_ManeuverPlanner_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ManeuverPlanner_2eproto = []() { AddDescriptors_ManeuverPlanner_2eproto(); return true; }();

// ===================================================================

void ManeuverPlannerParams::InitAsDefaultInstance() {
  ::_ManeuverPlannerParams_default_instance_._instance.get_mutable()->safety_bounds_ = const_cast< ::Rectanguloid*>(
      ::Rectanguloid::internal_default_instance());
}
class ManeuverPlannerParams::HasBitSetters {
 public:
  static const ::Rectanguloid& safety_bounds(const ManeuverPlannerParams* msg);
};

const ::Rectanguloid&
ManeuverPlannerParams::HasBitSetters::safety_bounds(const ManeuverPlannerParams* msg) {
  return *msg->safety_bounds_;
}
void ManeuverPlannerParams::clear_safety_bounds() {
  if (GetArenaNoVirtual() == NULL && safety_bounds_ != NULL) {
    delete safety_bounds_;
  }
  safety_bounds_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManeuverPlannerParams::kSafetyBoundsFieldNumber;
const int ManeuverPlannerParams::kReturnVelocityFieldNumber;
const int ManeuverPlannerParams::kManualRestartFieldNumber;
const int ManeuverPlannerParams::kManeuverRestartFieldNumber;
const int ManeuverPlannerParams::kUseSafetyBoundsFieldNumber;
const int ManeuverPlannerParams::kPerformInSafetyBoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManeuverPlannerParams::ManeuverPlannerParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManeuverPlannerParams)
}
ManeuverPlannerParams::ManeuverPlannerParams(const ManeuverPlannerParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_safety_bounds()) {
    safety_bounds_ = new ::Rectanguloid(*from.safety_bounds_);
  } else {
    safety_bounds_ = NULL;
  }
  ::memcpy(&return_velocity_, &from.return_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&perform_in_safety_bounds_) -
    reinterpret_cast<char*>(&return_velocity_)) + sizeof(perform_in_safety_bounds_));
  // @@protoc_insertion_point(copy_constructor:ManeuverPlannerParams)
}

void ManeuverPlannerParams::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ManeuverPlannerParams_ManeuverPlanner_2eproto.base);
  ::memset(&safety_bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perform_in_safety_bounds_) -
      reinterpret_cast<char*>(&safety_bounds_)) + sizeof(perform_in_safety_bounds_));
}

ManeuverPlannerParams::~ManeuverPlannerParams() {
  // @@protoc_insertion_point(destructor:ManeuverPlannerParams)
  SharedDtor();
}

void ManeuverPlannerParams::SharedDtor() {
  if (this != internal_default_instance()) delete safety_bounds_;
}

void ManeuverPlannerParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManeuverPlannerParams& ManeuverPlannerParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ManeuverPlannerParams_ManeuverPlanner_2eproto.base);
  return *internal_default_instance();
}


void ManeuverPlannerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ManeuverPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && safety_bounds_ != NULL) {
    delete safety_bounds_;
  }
  safety_bounds_ = NULL;
  ::memset(&return_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perform_in_safety_bounds_) -
      reinterpret_cast<char*>(&return_velocity_)) + sizeof(perform_in_safety_bounds_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ManeuverPlannerParams::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ManeuverPlannerParams*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .Rectanguloid safety_bounds = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Rectanguloid::_InternalParse;
        object = msg->mutable_safety_bounds();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // double return_velocity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_return_velocity(val);
        break;
      }
      // bool manual_restart = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_manual_restart(value);
        break;
      }
      // bool maneuver_restart = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_maneuver_restart(value);
        break;
      }
      // bool use_safety_bounds = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_use_safety_bounds(value);
        break;
      }
      // bool perform_in_safety_bounds = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_perform_in_safety_bounds(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ManeuverPlannerParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManeuverPlannerParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Rectanguloid safety_bounds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_safety_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double return_velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &return_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool manual_restart = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manual_restart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool maneuver_restart = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &maneuver_restart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_safety_bounds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_safety_bounds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool perform_in_safety_bounds = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &perform_in_safety_bounds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManeuverPlannerParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManeuverPlannerParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ManeuverPlannerParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManeuverPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Rectanguloid safety_bounds = 1;
  if (this->has_safety_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::safety_bounds(this), output);
  }

  // double return_velocity = 2;
  if (this->return_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->return_velocity(), output);
  }

  // bool manual_restart = 3;
  if (this->manual_restart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->manual_restart(), output);
  }

  // bool maneuver_restart = 4;
  if (this->maneuver_restart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->maneuver_restart(), output);
  }

  // bool use_safety_bounds = 5;
  if (this->use_safety_bounds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_safety_bounds(), output);
  }

  // bool perform_in_safety_bounds = 6;
  if (this->perform_in_safety_bounds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->perform_in_safety_bounds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManeuverPlannerParams)
}

::google::protobuf::uint8* ManeuverPlannerParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ManeuverPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Rectanguloid safety_bounds = 1;
  if (this->has_safety_bounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::safety_bounds(this), deterministic, target);
  }

  // double return_velocity = 2;
  if (this->return_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->return_velocity(), target);
  }

  // bool manual_restart = 3;
  if (this->manual_restart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->manual_restart(), target);
  }

  // bool maneuver_restart = 4;
  if (this->maneuver_restart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->maneuver_restart(), target);
  }

  // bool use_safety_bounds = 5;
  if (this->use_safety_bounds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_safety_bounds(), target);
  }

  // bool perform_in_safety_bounds = 6;
  if (this->perform_in_safety_bounds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->perform_in_safety_bounds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManeuverPlannerParams)
  return target;
}

size_t ManeuverPlannerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManeuverPlannerParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Rectanguloid safety_bounds = 1;
  if (this->has_safety_bounds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *safety_bounds_);
  }

  // double return_velocity = 2;
  if (this->return_velocity() != 0) {
    total_size += 1 + 8;
  }

  // bool manual_restart = 3;
  if (this->manual_restart() != 0) {
    total_size += 1 + 1;
  }

  // bool maneuver_restart = 4;
  if (this->maneuver_restart() != 0) {
    total_size += 1 + 1;
  }

  // bool use_safety_bounds = 5;
  if (this->use_safety_bounds() != 0) {
    total_size += 1 + 1;
  }

  // bool perform_in_safety_bounds = 6;
  if (this->perform_in_safety_bounds() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManeuverPlannerParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManeuverPlannerParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ManeuverPlannerParams* source =
      ::google::protobuf::DynamicCastToGenerated<ManeuverPlannerParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManeuverPlannerParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManeuverPlannerParams)
    MergeFrom(*source);
  }
}

void ManeuverPlannerParams::MergeFrom(const ManeuverPlannerParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManeuverPlannerParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_safety_bounds()) {
    mutable_safety_bounds()->::Rectanguloid::MergeFrom(from.safety_bounds());
  }
  if (from.return_velocity() != 0) {
    set_return_velocity(from.return_velocity());
  }
  if (from.manual_restart() != 0) {
    set_manual_restart(from.manual_restart());
  }
  if (from.maneuver_restart() != 0) {
    set_maneuver_restart(from.maneuver_restart());
  }
  if (from.use_safety_bounds() != 0) {
    set_use_safety_bounds(from.use_safety_bounds());
  }
  if (from.perform_in_safety_bounds() != 0) {
    set_perform_in_safety_bounds(from.perform_in_safety_bounds());
  }
}

void ManeuverPlannerParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManeuverPlannerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManeuverPlannerParams::CopyFrom(const ManeuverPlannerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManeuverPlannerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManeuverPlannerParams::IsInitialized() const {
  return true;
}

void ManeuverPlannerParams::Swap(ManeuverPlannerParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManeuverPlannerParams::InternalSwap(ManeuverPlannerParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(safety_bounds_, other->safety_bounds_);
  swap(return_velocity_, other->return_velocity_);
  swap(manual_restart_, other->manual_restart_);
  swap(maneuver_restart_, other->maneuver_restart_);
  swap(use_safety_bounds_, other->use_safety_bounds_);
  swap(perform_in_safety_bounds_, other->perform_in_safety_bounds_);
}

::google::protobuf::Metadata ManeuverPlannerParams::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ManeuverPlanner_2eproto);
  return ::file_level_metadata_ManeuverPlanner_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ManeuverPlannerStatus::InitAsDefaultInstance() {
}
class ManeuverPlannerStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManeuverPlannerStatus::kManeuverSetActiveFieldNumber;
const int ManeuverPlannerStatus::kManualOverrideActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManeuverPlannerStatus::ManeuverPlannerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManeuverPlannerStatus)
}
ManeuverPlannerStatus::ManeuverPlannerStatus(const ManeuverPlannerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maneuver_set_active_, &from.maneuver_set_active_,
    static_cast<size_t>(reinterpret_cast<char*>(&manual_override_active_) -
    reinterpret_cast<char*>(&maneuver_set_active_)) + sizeof(manual_override_active_));
  // @@protoc_insertion_point(copy_constructor:ManeuverPlannerStatus)
}

void ManeuverPlannerStatus::SharedCtor() {
  ::memset(&maneuver_set_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manual_override_active_) -
      reinterpret_cast<char*>(&maneuver_set_active_)) + sizeof(manual_override_active_));
}

ManeuverPlannerStatus::~ManeuverPlannerStatus() {
  // @@protoc_insertion_point(destructor:ManeuverPlannerStatus)
  SharedDtor();
}

void ManeuverPlannerStatus::SharedDtor() {
}

void ManeuverPlannerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManeuverPlannerStatus& ManeuverPlannerStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ManeuverPlannerStatus_ManeuverPlanner_2eproto.base);
  return *internal_default_instance();
}


void ManeuverPlannerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ManeuverPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&maneuver_set_active_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manual_override_active_) -
      reinterpret_cast<char*>(&maneuver_set_active_)) + sizeof(manual_override_active_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ManeuverPlannerStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ManeuverPlannerStatus*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool maneuver_set_active = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_maneuver_set_active(value);
        break;
      }
      // bool manual_override_active = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_manual_override_active(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ManeuverPlannerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManeuverPlannerStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool maneuver_set_active = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &maneuver_set_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool manual_override_active = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manual_override_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManeuverPlannerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManeuverPlannerStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ManeuverPlannerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManeuverPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool maneuver_set_active = 1;
  if (this->maneuver_set_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->maneuver_set_active(), output);
  }

  // bool manual_override_active = 2;
  if (this->manual_override_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->manual_override_active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManeuverPlannerStatus)
}

::google::protobuf::uint8* ManeuverPlannerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ManeuverPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool maneuver_set_active = 1;
  if (this->maneuver_set_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->maneuver_set_active(), target);
  }

  // bool manual_override_active = 2;
  if (this->manual_override_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->manual_override_active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManeuverPlannerStatus)
  return target;
}

size_t ManeuverPlannerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManeuverPlannerStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool maneuver_set_active = 1;
  if (this->maneuver_set_active() != 0) {
    total_size += 1 + 1;
  }

  // bool manual_override_active = 2;
  if (this->manual_override_active() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManeuverPlannerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManeuverPlannerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ManeuverPlannerStatus* source =
      ::google::protobuf::DynamicCastToGenerated<ManeuverPlannerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManeuverPlannerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManeuverPlannerStatus)
    MergeFrom(*source);
  }
}

void ManeuverPlannerStatus::MergeFrom(const ManeuverPlannerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManeuverPlannerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maneuver_set_active() != 0) {
    set_maneuver_set_active(from.maneuver_set_active());
  }
  if (from.manual_override_active() != 0) {
    set_manual_override_active(from.manual_override_active());
  }
}

void ManeuverPlannerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManeuverPlannerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManeuverPlannerStatus::CopyFrom(const ManeuverPlannerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManeuverPlannerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManeuverPlannerStatus::IsInitialized() const {
  return true;
}

void ManeuverPlannerStatus::Swap(ManeuverPlannerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManeuverPlannerStatus::InternalSwap(ManeuverPlannerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(maneuver_set_active_, other->maneuver_set_active_);
  swap(manual_override_active_, other->manual_override_active_);
}

::google::protobuf::Metadata ManeuverPlannerStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_ManeuverPlanner_2eproto);
  return ::file_level_metadata_ManeuverPlanner_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::ManeuverPlannerParams* Arena::CreateMaybeMessage< ::ManeuverPlannerParams >(Arena* arena) {
  return Arena::CreateInternal< ::ManeuverPlannerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ManeuverPlannerStatus* Arena::CreateMaybeMessage< ::ManeuverPlannerStatus >(Arena* arena) {
  return Arena::CreateInternal< ::ManeuverPlannerStatus >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
