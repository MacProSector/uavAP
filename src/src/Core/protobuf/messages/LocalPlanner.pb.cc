// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LocalPlanner.proto

#include "LocalPlanner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_LocalPlanner_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AirplaneLinearLocalPlannerParams_LocalPlanner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocalPlanner_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AirplaneLinearLocalPlannerStatus_LocalPlanner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocalPlanner_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ManeuverLocalPlannerParams_LocalPlanner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocalPlanner_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ManeuverLocalPlannerStatus_LocalPlanner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocalPlanner_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LinearLocalPlannerParams_LocalPlanner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LocalPlanner_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LinearLocalPlannerStatus_LocalPlanner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Velocities_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VelocityBody_Velocities_2eproto;
class AirplaneLinearLocalPlannerStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AirplaneLinearLocalPlannerStatus> _instance;
} _AirplaneLinearLocalPlannerStatus_default_instance_;
class LinearLocalPlannerStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinearLocalPlannerStatus> _instance;
} _LinearLocalPlannerStatus_default_instance_;
class ManeuverLocalPlannerStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ManeuverLocalPlannerStatus> _instance;
} _ManeuverLocalPlannerStatus_default_instance_;
class LocalPlannerStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalPlannerStatus> _instance;
} _LocalPlannerStatus_default_instance_;
class AirplaneLinearLocalPlannerParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AirplaneLinearLocalPlannerParams> _instance;
} _AirplaneLinearLocalPlannerParams_default_instance_;
class LinearLocalPlannerParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LinearLocalPlannerParams> _instance;
} _LinearLocalPlannerParams_default_instance_;
class ManeuverLocalPlannerParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ManeuverLocalPlannerParams> _instance;
} _ManeuverLocalPlannerParams_default_instance_;
class LocalPlannerParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalPlannerParams> _instance;
} _LocalPlannerParams_default_instance_;
static void InitDefaultsAirplaneLinearLocalPlannerStatus_LocalPlanner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AirplaneLinearLocalPlannerStatus_default_instance_;
    new (ptr) ::AirplaneLinearLocalPlannerStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AirplaneLinearLocalPlannerStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AirplaneLinearLocalPlannerStatus_LocalPlanner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAirplaneLinearLocalPlannerStatus_LocalPlanner_2eproto}, {}};

static void InitDefaultsLinearLocalPlannerStatus_LocalPlanner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LinearLocalPlannerStatus_default_instance_;
    new (ptr) ::LinearLocalPlannerStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LinearLocalPlannerStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LinearLocalPlannerStatus_LocalPlanner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLinearLocalPlannerStatus_LocalPlanner_2eproto}, {
      &scc_info_AirplaneLinearLocalPlannerStatus_LocalPlanner_2eproto.base,
      &scc_info_VelocityBody_Velocities_2eproto.base,}};

static void InitDefaultsManeuverLocalPlannerStatus_LocalPlanner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ManeuverLocalPlannerStatus_default_instance_;
    new (ptr) ::ManeuverLocalPlannerStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ManeuverLocalPlannerStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ManeuverLocalPlannerStatus_LocalPlanner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsManeuverLocalPlannerStatus_LocalPlanner_2eproto}, {}};

static void InitDefaultsLocalPlannerStatus_LocalPlanner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LocalPlannerStatus_default_instance_;
    new (ptr) ::LocalPlannerStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LocalPlannerStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LocalPlannerStatus_LocalPlanner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLocalPlannerStatus_LocalPlanner_2eproto}, {
      &scc_info_LinearLocalPlannerStatus_LocalPlanner_2eproto.base,
      &scc_info_ManeuverLocalPlannerStatus_LocalPlanner_2eproto.base,}};

static void InitDefaultsAirplaneLinearLocalPlannerParams_LocalPlanner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AirplaneLinearLocalPlannerParams_default_instance_;
    new (ptr) ::AirplaneLinearLocalPlannerParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AirplaneLinearLocalPlannerParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AirplaneLinearLocalPlannerParams_LocalPlanner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAirplaneLinearLocalPlannerParams_LocalPlanner_2eproto}, {}};

static void InitDefaultsLinearLocalPlannerParams_LocalPlanner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LinearLocalPlannerParams_default_instance_;
    new (ptr) ::LinearLocalPlannerParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LinearLocalPlannerParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LinearLocalPlannerParams_LocalPlanner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLinearLocalPlannerParams_LocalPlanner_2eproto}, {
      &scc_info_AirplaneLinearLocalPlannerParams_LocalPlanner_2eproto.base,}};

static void InitDefaultsManeuverLocalPlannerParams_LocalPlanner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ManeuverLocalPlannerParams_default_instance_;
    new (ptr) ::ManeuverLocalPlannerParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ManeuverLocalPlannerParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ManeuverLocalPlannerParams_LocalPlanner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsManeuverLocalPlannerParams_LocalPlanner_2eproto}, {}};

static void InitDefaultsLocalPlannerParams_LocalPlanner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LocalPlannerParams_default_instance_;
    new (ptr) ::LocalPlannerParams();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LocalPlannerParams::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LocalPlannerParams_LocalPlanner_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLocalPlannerParams_LocalPlanner_2eproto}, {
      &scc_info_LinearLocalPlannerParams_LocalPlanner_2eproto.base,
      &scc_info_ManeuverLocalPlannerParams_LocalPlanner_2eproto.base,}};

void InitDefaults_LocalPlanner_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_AirplaneLinearLocalPlannerStatus_LocalPlanner_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinearLocalPlannerStatus_LocalPlanner_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ManeuverLocalPlannerStatus_LocalPlanner_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocalPlannerStatus_LocalPlanner_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AirplaneLinearLocalPlannerParams_LocalPlanner_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LinearLocalPlannerParams_LocalPlanner_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ManeuverLocalPlannerParams_LocalPlanner_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocalPlannerParams_LocalPlanner_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_LocalPlanner_2eproto[8];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_LocalPlanner_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_LocalPlanner_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_LocalPlanner_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AirplaneLinearLocalPlannerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AirplaneLinearLocalPlannerStatus, heading_target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LinearLocalPlannerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LinearLocalPlannerStatus, airplane_status_),
  PROTOBUF_FIELD_OFFSET(::LinearLocalPlannerStatus, current_path_section_),
  PROTOBUF_FIELD_OFFSET(::LinearLocalPlannerStatus, velocity_target_),
  PROTOBUF_FIELD_OFFSET(::LinearLocalPlannerStatus, yaw_rate_target_),
  PROTOBUF_FIELD_OFFSET(::LinearLocalPlannerStatus, is_in_approach_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ManeuverLocalPlannerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ManeuverLocalPlannerStatus, current_path_section_),
  PROTOBUF_FIELD_OFFSET(::ManeuverLocalPlannerStatus, velocity_target_),
  PROTOBUF_FIELD_OFFSET(::ManeuverLocalPlannerStatus, yaw_rate_target_),
  PROTOBUF_FIELD_OFFSET(::ManeuverLocalPlannerStatus, climb_angle_target_),
  PROTOBUF_FIELD_OFFSET(::ManeuverLocalPlannerStatus, heading_target_),
  PROTOBUF_FIELD_OFFSET(::ManeuverLocalPlannerStatus, is_in_approach_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LocalPlannerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LocalPlannerStatus, linear_status_),
  PROTOBUF_FIELD_OFFSET(::LocalPlannerStatus, maneuver_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AirplaneLinearLocalPlannerParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AirplaneLinearLocalPlannerParams, k_altitude_),
  PROTOBUF_FIELD_OFFSET(::AirplaneLinearLocalPlannerParams, k_heading_),
  PROTOBUF_FIELD_OFFSET(::AirplaneLinearLocalPlannerParams, k_yaw_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LinearLocalPlannerParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LinearLocalPlannerParams, airplane_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ManeuverLocalPlannerParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ManeuverLocalPlannerParams, k_altitude_),
  PROTOBUF_FIELD_OFFSET(::ManeuverLocalPlannerParams, k_convergence_),
  PROTOBUF_FIELD_OFFSET(::ManeuverLocalPlannerParams, k_yaw_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LocalPlannerParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LocalPlannerParams, linear_params_),
  PROTOBUF_FIELD_OFFSET(::LocalPlannerParams, maneuver_params_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AirplaneLinearLocalPlannerStatus)},
  { 6, -1, sizeof(::LinearLocalPlannerStatus)},
  { 16, -1, sizeof(::ManeuverLocalPlannerStatus)},
  { 27, -1, sizeof(::LocalPlannerStatus)},
  { 34, -1, sizeof(::AirplaneLinearLocalPlannerParams)},
  { 42, -1, sizeof(::LinearLocalPlannerParams)},
  { 48, -1, sizeof(::ManeuverLocalPlannerParams)},
  { 56, -1, sizeof(::LocalPlannerParams)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AirplaneLinearLocalPlannerStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_LinearLocalPlannerStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ManeuverLocalPlannerStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_LocalPlannerStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AirplaneLinearLocalPlannerParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_LinearLocalPlannerParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ManeuverLocalPlannerParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_LocalPlannerParams_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_LocalPlanner_2eproto = {
  {}, AddDescriptors_LocalPlanner_2eproto, "LocalPlanner.proto", schemas,
  file_default_instances, TableStruct_LocalPlanner_2eproto::offsets,
  file_level_metadata_LocalPlanner_2eproto, 8, file_level_enum_descriptors_LocalPlanner_2eproto, file_level_service_descriptors_LocalPlanner_2eproto,
};

::google::protobuf::internal::DescriptorTable descriptor_table_LocalPlanner_2eproto = {
  false, InitDefaults_LocalPlanner_2eproto, 
  "\n\022LocalPlanner.proto\032\020Velocities.proto\":"
  "\n AirplaneLinearLocalPlannerStatus\022\026\n\016he"
  "ading_target\030\001 \001(\001\"\315\001\n\030LinearLocalPlanne"
  "rStatus\022:\n\017airplane_status\030\001 \001(\0132!.Airpl"
  "aneLinearLocalPlannerStatus\022\034\n\024current_p"
  "ath_section\030\002 \001(\r\022&\n\017velocity_target\030\003 \001"
  "(\0132\r.VelocityBody\022\027\n\017yaw_rate_target\030\004 \001"
  "(\001\022\026\n\016is_in_approach\030\005 \001(\010\"\270\001\n\032ManeuverL"
  "ocalPlannerStatus\022\034\n\024current_path_sectio"
  "n\030\001 \001(\r\022\027\n\017velocity_target\030\002 \001(\001\022\027\n\017yaw_"
  "rate_target\030\003 \001(\001\022\032\n\022climb_angle_target\030"
  "\004 \001(\001\022\026\n\016heading_target\030\005 \001(\001\022\026\n\016is_in_a"
  "pproach\030\006 \001(\010\"|\n\022LocalPlannerStatus\0220\n\rl"
  "inear_status\030\001 \001(\0132\031.LinearLocalPlannerS"
  "tatus\0224\n\017maneuver_status\030\002 \001(\0132\033.Maneuve"
  "rLocalPlannerStatus\"]\n AirplaneLinearLoc"
  "alPlannerParams\022\022\n\nk_altitude\030\001 \001(\001\022\021\n\tk"
  "_heading\030\002 \001(\001\022\022\n\nk_yaw_rate\030\003 \001(\001\"V\n\030Li"
  "nearLocalPlannerParams\022:\n\017airplane_param"
  "s\030\001 \001(\0132!.AirplaneLinearLocalPlannerPara"
  "ms\"[\n\032ManeuverLocalPlannerParams\022\022\n\nk_al"
  "titude\030\001 \001(\001\022\025\n\rk_convergence\030\002 \001(\001\022\022\n\nk"
  "_yaw_rate\030\003 \001(\001\"|\n\022LocalPlannerParams\0220\n"
  "\rlinear_params\030\001 \001(\0132\031.LinearLocalPlanne"
  "rParams\0224\n\017maneuver_params\030\002 \001(\0132\033.Maneu"
  "verLocalPlannerParamsb\006proto3"
,
  "LocalPlanner.proto", &assign_descriptors_table_LocalPlanner_2eproto, 1029,
};

void AddDescriptors_LocalPlanner_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_Velocities_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_LocalPlanner_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LocalPlanner_2eproto = []() { AddDescriptors_LocalPlanner_2eproto(); return true; }();

// ===================================================================

void AirplaneLinearLocalPlannerStatus::InitAsDefaultInstance() {
}
class AirplaneLinearLocalPlannerStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AirplaneLinearLocalPlannerStatus::kHeadingTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirplaneLinearLocalPlannerStatus::AirplaneLinearLocalPlannerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AirplaneLinearLocalPlannerStatus)
}
AirplaneLinearLocalPlannerStatus::AirplaneLinearLocalPlannerStatus(const AirplaneLinearLocalPlannerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  heading_target_ = from.heading_target_;
  // @@protoc_insertion_point(copy_constructor:AirplaneLinearLocalPlannerStatus)
}

void AirplaneLinearLocalPlannerStatus::SharedCtor() {
  heading_target_ = 0;
}

AirplaneLinearLocalPlannerStatus::~AirplaneLinearLocalPlannerStatus() {
  // @@protoc_insertion_point(destructor:AirplaneLinearLocalPlannerStatus)
  SharedDtor();
}

void AirplaneLinearLocalPlannerStatus::SharedDtor() {
}

void AirplaneLinearLocalPlannerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AirplaneLinearLocalPlannerStatus& AirplaneLinearLocalPlannerStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AirplaneLinearLocalPlannerStatus_LocalPlanner_2eproto.base);
  return *internal_default_instance();
}


void AirplaneLinearLocalPlannerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:AirplaneLinearLocalPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heading_target_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AirplaneLinearLocalPlannerStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AirplaneLinearLocalPlannerStatus*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double heading_target = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_heading_target(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AirplaneLinearLocalPlannerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AirplaneLinearLocalPlannerStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double heading_target = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AirplaneLinearLocalPlannerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AirplaneLinearLocalPlannerStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AirplaneLinearLocalPlannerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AirplaneLinearLocalPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double heading_target = 1;
  if (this->heading_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->heading_target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AirplaneLinearLocalPlannerStatus)
}

::google::protobuf::uint8* AirplaneLinearLocalPlannerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AirplaneLinearLocalPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double heading_target = 1;
  if (this->heading_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->heading_target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirplaneLinearLocalPlannerStatus)
  return target;
}

size_t AirplaneLinearLocalPlannerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AirplaneLinearLocalPlannerStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double heading_target = 1;
  if (this->heading_target() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AirplaneLinearLocalPlannerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AirplaneLinearLocalPlannerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const AirplaneLinearLocalPlannerStatus* source =
      ::google::protobuf::DynamicCastToGenerated<AirplaneLinearLocalPlannerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AirplaneLinearLocalPlannerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AirplaneLinearLocalPlannerStatus)
    MergeFrom(*source);
  }
}

void AirplaneLinearLocalPlannerStatus::MergeFrom(const AirplaneLinearLocalPlannerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AirplaneLinearLocalPlannerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.heading_target() != 0) {
    set_heading_target(from.heading_target());
  }
}

void AirplaneLinearLocalPlannerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AirplaneLinearLocalPlannerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirplaneLinearLocalPlannerStatus::CopyFrom(const AirplaneLinearLocalPlannerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirplaneLinearLocalPlannerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirplaneLinearLocalPlannerStatus::IsInitialized() const {
  return true;
}

void AirplaneLinearLocalPlannerStatus::Swap(AirplaneLinearLocalPlannerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirplaneLinearLocalPlannerStatus::InternalSwap(AirplaneLinearLocalPlannerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(heading_target_, other->heading_target_);
}

::google::protobuf::Metadata AirplaneLinearLocalPlannerStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LocalPlanner_2eproto);
  return ::file_level_metadata_LocalPlanner_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LinearLocalPlannerStatus::InitAsDefaultInstance() {
  ::_LinearLocalPlannerStatus_default_instance_._instance.get_mutable()->airplane_status_ = const_cast< ::AirplaneLinearLocalPlannerStatus*>(
      ::AirplaneLinearLocalPlannerStatus::internal_default_instance());
  ::_LinearLocalPlannerStatus_default_instance_._instance.get_mutable()->velocity_target_ = const_cast< ::VelocityBody*>(
      ::VelocityBody::internal_default_instance());
}
class LinearLocalPlannerStatus::HasBitSetters {
 public:
  static const ::AirplaneLinearLocalPlannerStatus& airplane_status(const LinearLocalPlannerStatus* msg);
  static const ::VelocityBody& velocity_target(const LinearLocalPlannerStatus* msg);
};

const ::AirplaneLinearLocalPlannerStatus&
LinearLocalPlannerStatus::HasBitSetters::airplane_status(const LinearLocalPlannerStatus* msg) {
  return *msg->airplane_status_;
}
const ::VelocityBody&
LinearLocalPlannerStatus::HasBitSetters::velocity_target(const LinearLocalPlannerStatus* msg) {
  return *msg->velocity_target_;
}
void LinearLocalPlannerStatus::clear_velocity_target() {
  if (GetArenaNoVirtual() == NULL && velocity_target_ != NULL) {
    delete velocity_target_;
  }
  velocity_target_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinearLocalPlannerStatus::kAirplaneStatusFieldNumber;
const int LinearLocalPlannerStatus::kCurrentPathSectionFieldNumber;
const int LinearLocalPlannerStatus::kVelocityTargetFieldNumber;
const int LinearLocalPlannerStatus::kYawRateTargetFieldNumber;
const int LinearLocalPlannerStatus::kIsInApproachFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinearLocalPlannerStatus::LinearLocalPlannerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinearLocalPlannerStatus)
}
LinearLocalPlannerStatus::LinearLocalPlannerStatus(const LinearLocalPlannerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_airplane_status()) {
    airplane_status_ = new ::AirplaneLinearLocalPlannerStatus(*from.airplane_status_);
  } else {
    airplane_status_ = NULL;
  }
  if (from.has_velocity_target()) {
    velocity_target_ = new ::VelocityBody(*from.velocity_target_);
  } else {
    velocity_target_ = NULL;
  }
  ::memcpy(&current_path_section_, &from.current_path_section_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_rate_target_) -
    reinterpret_cast<char*>(&current_path_section_)) + sizeof(yaw_rate_target_));
  // @@protoc_insertion_point(copy_constructor:LinearLocalPlannerStatus)
}

void LinearLocalPlannerStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LinearLocalPlannerStatus_LocalPlanner_2eproto.base);
  ::memset(&airplane_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_target_) -
      reinterpret_cast<char*>(&airplane_status_)) + sizeof(yaw_rate_target_));
}

LinearLocalPlannerStatus::~LinearLocalPlannerStatus() {
  // @@protoc_insertion_point(destructor:LinearLocalPlannerStatus)
  SharedDtor();
}

void LinearLocalPlannerStatus::SharedDtor() {
  if (this != internal_default_instance()) delete airplane_status_;
  if (this != internal_default_instance()) delete velocity_target_;
}

void LinearLocalPlannerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearLocalPlannerStatus& LinearLocalPlannerStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LinearLocalPlannerStatus_LocalPlanner_2eproto.base);
  return *internal_default_instance();
}


void LinearLocalPlannerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:LinearLocalPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && airplane_status_ != NULL) {
    delete airplane_status_;
  }
  airplane_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_target_ != NULL) {
    delete velocity_target_;
  }
  velocity_target_ = NULL;
  ::memset(&current_path_section_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_rate_target_) -
      reinterpret_cast<char*>(&current_path_section_)) + sizeof(yaw_rate_target_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LinearLocalPlannerStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LinearLocalPlannerStatus*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .AirplaneLinearLocalPlannerStatus airplane_status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AirplaneLinearLocalPlannerStatus::_InternalParse;
        object = msg->mutable_airplane_status();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // uint32 current_path_section = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_current_path_section(value);
        break;
      }
      // .VelocityBody velocity_target = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::VelocityBody::_InternalParse;
        object = msg->mutable_velocity_target();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // double yaw_rate_target = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_yaw_rate_target(val);
        break;
      }
      // bool is_in_approach = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_is_in_approach(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LinearLocalPlannerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinearLocalPlannerStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AirplaneLinearLocalPlannerStatus airplane_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_airplane_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 current_path_section = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_path_section_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .VelocityBody velocity_target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw_rate_target = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_rate_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_in_approach = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_approach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinearLocalPlannerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinearLocalPlannerStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LinearLocalPlannerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinearLocalPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AirplaneLinearLocalPlannerStatus airplane_status = 1;
  if (this->has_airplane_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::airplane_status(this), output);
  }

  // uint32 current_path_section = 2;
  if (this->current_path_section() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->current_path_section(), output);
  }

  // .VelocityBody velocity_target = 3;
  if (this->has_velocity_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::velocity_target(this), output);
  }

  // double yaw_rate_target = 4;
  if (this->yaw_rate_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->yaw_rate_target(), output);
  }

  // bool is_in_approach = 5;
  if (this->is_in_approach() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_in_approach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinearLocalPlannerStatus)
}

::google::protobuf::uint8* LinearLocalPlannerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinearLocalPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AirplaneLinearLocalPlannerStatus airplane_status = 1;
  if (this->has_airplane_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::airplane_status(this), deterministic, target);
  }

  // uint32 current_path_section = 2;
  if (this->current_path_section() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->current_path_section(), target);
  }

  // .VelocityBody velocity_target = 3;
  if (this->has_velocity_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::velocity_target(this), deterministic, target);
  }

  // double yaw_rate_target = 4;
  if (this->yaw_rate_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->yaw_rate_target(), target);
  }

  // bool is_in_approach = 5;
  if (this->is_in_approach() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_in_approach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinearLocalPlannerStatus)
  return target;
}

size_t LinearLocalPlannerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinearLocalPlannerStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AirplaneLinearLocalPlannerStatus airplane_status = 1;
  if (this->has_airplane_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *airplane_status_);
  }

  // .VelocityBody velocity_target = 3;
  if (this->has_velocity_target()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *velocity_target_);
  }

  // uint32 current_path_section = 2;
  if (this->current_path_section() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_path_section());
  }

  // bool is_in_approach = 5;
  if (this->is_in_approach() != 0) {
    total_size += 1 + 1;
  }

  // double yaw_rate_target = 4;
  if (this->yaw_rate_target() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearLocalPlannerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinearLocalPlannerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearLocalPlannerStatus* source =
      ::google::protobuf::DynamicCastToGenerated<LinearLocalPlannerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinearLocalPlannerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinearLocalPlannerStatus)
    MergeFrom(*source);
  }
}

void LinearLocalPlannerStatus::MergeFrom(const LinearLocalPlannerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinearLocalPlannerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_airplane_status()) {
    mutable_airplane_status()->::AirplaneLinearLocalPlannerStatus::MergeFrom(from.airplane_status());
  }
  if (from.has_velocity_target()) {
    mutable_velocity_target()->::VelocityBody::MergeFrom(from.velocity_target());
  }
  if (from.current_path_section() != 0) {
    set_current_path_section(from.current_path_section());
  }
  if (from.is_in_approach() != 0) {
    set_is_in_approach(from.is_in_approach());
  }
  if (from.yaw_rate_target() != 0) {
    set_yaw_rate_target(from.yaw_rate_target());
  }
}

void LinearLocalPlannerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinearLocalPlannerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearLocalPlannerStatus::CopyFrom(const LinearLocalPlannerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinearLocalPlannerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearLocalPlannerStatus::IsInitialized() const {
  return true;
}

void LinearLocalPlannerStatus::Swap(LinearLocalPlannerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinearLocalPlannerStatus::InternalSwap(LinearLocalPlannerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(airplane_status_, other->airplane_status_);
  swap(velocity_target_, other->velocity_target_);
  swap(current_path_section_, other->current_path_section_);
  swap(is_in_approach_, other->is_in_approach_);
  swap(yaw_rate_target_, other->yaw_rate_target_);
}

::google::protobuf::Metadata LinearLocalPlannerStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LocalPlanner_2eproto);
  return ::file_level_metadata_LocalPlanner_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ManeuverLocalPlannerStatus::InitAsDefaultInstance() {
}
class ManeuverLocalPlannerStatus::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManeuverLocalPlannerStatus::kCurrentPathSectionFieldNumber;
const int ManeuverLocalPlannerStatus::kVelocityTargetFieldNumber;
const int ManeuverLocalPlannerStatus::kYawRateTargetFieldNumber;
const int ManeuverLocalPlannerStatus::kClimbAngleTargetFieldNumber;
const int ManeuverLocalPlannerStatus::kHeadingTargetFieldNumber;
const int ManeuverLocalPlannerStatus::kIsInApproachFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManeuverLocalPlannerStatus::ManeuverLocalPlannerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManeuverLocalPlannerStatus)
}
ManeuverLocalPlannerStatus::ManeuverLocalPlannerStatus(const ManeuverLocalPlannerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&velocity_target_, &from.velocity_target_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_target_) -
    reinterpret_cast<char*>(&velocity_target_)) + sizeof(heading_target_));
  // @@protoc_insertion_point(copy_constructor:ManeuverLocalPlannerStatus)
}

void ManeuverLocalPlannerStatus::SharedCtor() {
  ::memset(&velocity_target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_target_) -
      reinterpret_cast<char*>(&velocity_target_)) + sizeof(heading_target_));
}

ManeuverLocalPlannerStatus::~ManeuverLocalPlannerStatus() {
  // @@protoc_insertion_point(destructor:ManeuverLocalPlannerStatus)
  SharedDtor();
}

void ManeuverLocalPlannerStatus::SharedDtor() {
}

void ManeuverLocalPlannerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManeuverLocalPlannerStatus& ManeuverLocalPlannerStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ManeuverLocalPlannerStatus_LocalPlanner_2eproto.base);
  return *internal_default_instance();
}


void ManeuverLocalPlannerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ManeuverLocalPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&velocity_target_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heading_target_) -
      reinterpret_cast<char*>(&velocity_target_)) + sizeof(heading_target_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ManeuverLocalPlannerStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ManeuverLocalPlannerStatus*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 current_path_section = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_current_path_section(value);
        break;
      }
      // double velocity_target = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_velocity_target(val);
        break;
      }
      // double yaw_rate_target = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_yaw_rate_target(val);
        break;
      }
      // double climb_angle_target = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_climb_angle_target(val);
        break;
      }
      // double heading_target = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_heading_target(val);
        break;
      }
      // bool is_in_approach = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        bool value = val;
        msg->set_is_in_approach(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ManeuverLocalPlannerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManeuverLocalPlannerStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 current_path_section = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_path_section_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double velocity_target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw_rate_target = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_rate_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double climb_angle_target = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &climb_angle_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading_target = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_in_approach = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_approach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManeuverLocalPlannerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManeuverLocalPlannerStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ManeuverLocalPlannerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManeuverLocalPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current_path_section = 1;
  if (this->current_path_section() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_path_section(), output);
  }

  // double velocity_target = 2;
  if (this->velocity_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->velocity_target(), output);
  }

  // double yaw_rate_target = 3;
  if (this->yaw_rate_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yaw_rate_target(), output);
  }

  // double climb_angle_target = 4;
  if (this->climb_angle_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->climb_angle_target(), output);
  }

  // double heading_target = 5;
  if (this->heading_target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading_target(), output);
  }

  // bool is_in_approach = 6;
  if (this->is_in_approach() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_in_approach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManeuverLocalPlannerStatus)
}

::google::protobuf::uint8* ManeuverLocalPlannerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ManeuverLocalPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current_path_section = 1;
  if (this->current_path_section() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_path_section(), target);
  }

  // double velocity_target = 2;
  if (this->velocity_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->velocity_target(), target);
  }

  // double yaw_rate_target = 3;
  if (this->yaw_rate_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->yaw_rate_target(), target);
  }

  // double climb_angle_target = 4;
  if (this->climb_angle_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->climb_angle_target(), target);
  }

  // double heading_target = 5;
  if (this->heading_target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading_target(), target);
  }

  // bool is_in_approach = 6;
  if (this->is_in_approach() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_in_approach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManeuverLocalPlannerStatus)
  return target;
}

size_t ManeuverLocalPlannerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManeuverLocalPlannerStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double velocity_target = 2;
  if (this->velocity_target() != 0) {
    total_size += 1 + 8;
  }

  // double yaw_rate_target = 3;
  if (this->yaw_rate_target() != 0) {
    total_size += 1 + 8;
  }

  // uint32 current_path_section = 1;
  if (this->current_path_section() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_path_section());
  }

  // bool is_in_approach = 6;
  if (this->is_in_approach() != 0) {
    total_size += 1 + 1;
  }

  // double climb_angle_target = 4;
  if (this->climb_angle_target() != 0) {
    total_size += 1 + 8;
  }

  // double heading_target = 5;
  if (this->heading_target() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManeuverLocalPlannerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManeuverLocalPlannerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ManeuverLocalPlannerStatus* source =
      ::google::protobuf::DynamicCastToGenerated<ManeuverLocalPlannerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManeuverLocalPlannerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManeuverLocalPlannerStatus)
    MergeFrom(*source);
  }
}

void ManeuverLocalPlannerStatus::MergeFrom(const ManeuverLocalPlannerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManeuverLocalPlannerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.velocity_target() != 0) {
    set_velocity_target(from.velocity_target());
  }
  if (from.yaw_rate_target() != 0) {
    set_yaw_rate_target(from.yaw_rate_target());
  }
  if (from.current_path_section() != 0) {
    set_current_path_section(from.current_path_section());
  }
  if (from.is_in_approach() != 0) {
    set_is_in_approach(from.is_in_approach());
  }
  if (from.climb_angle_target() != 0) {
    set_climb_angle_target(from.climb_angle_target());
  }
  if (from.heading_target() != 0) {
    set_heading_target(from.heading_target());
  }
}

void ManeuverLocalPlannerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManeuverLocalPlannerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManeuverLocalPlannerStatus::CopyFrom(const ManeuverLocalPlannerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManeuverLocalPlannerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManeuverLocalPlannerStatus::IsInitialized() const {
  return true;
}

void ManeuverLocalPlannerStatus::Swap(ManeuverLocalPlannerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManeuverLocalPlannerStatus::InternalSwap(ManeuverLocalPlannerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(velocity_target_, other->velocity_target_);
  swap(yaw_rate_target_, other->yaw_rate_target_);
  swap(current_path_section_, other->current_path_section_);
  swap(is_in_approach_, other->is_in_approach_);
  swap(climb_angle_target_, other->climb_angle_target_);
  swap(heading_target_, other->heading_target_);
}

::google::protobuf::Metadata ManeuverLocalPlannerStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LocalPlanner_2eproto);
  return ::file_level_metadata_LocalPlanner_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LocalPlannerStatus::InitAsDefaultInstance() {
  ::_LocalPlannerStatus_default_instance_._instance.get_mutable()->linear_status_ = const_cast< ::LinearLocalPlannerStatus*>(
      ::LinearLocalPlannerStatus::internal_default_instance());
  ::_LocalPlannerStatus_default_instance_._instance.get_mutable()->maneuver_status_ = const_cast< ::ManeuverLocalPlannerStatus*>(
      ::ManeuverLocalPlannerStatus::internal_default_instance());
}
class LocalPlannerStatus::HasBitSetters {
 public:
  static const ::LinearLocalPlannerStatus& linear_status(const LocalPlannerStatus* msg);
  static const ::ManeuverLocalPlannerStatus& maneuver_status(const LocalPlannerStatus* msg);
};

const ::LinearLocalPlannerStatus&
LocalPlannerStatus::HasBitSetters::linear_status(const LocalPlannerStatus* msg) {
  return *msg->linear_status_;
}
const ::ManeuverLocalPlannerStatus&
LocalPlannerStatus::HasBitSetters::maneuver_status(const LocalPlannerStatus* msg) {
  return *msg->maneuver_status_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalPlannerStatus::kLinearStatusFieldNumber;
const int LocalPlannerStatus::kManeuverStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalPlannerStatus::LocalPlannerStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LocalPlannerStatus)
}
LocalPlannerStatus::LocalPlannerStatus(const LocalPlannerStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linear_status()) {
    linear_status_ = new ::LinearLocalPlannerStatus(*from.linear_status_);
  } else {
    linear_status_ = NULL;
  }
  if (from.has_maneuver_status()) {
    maneuver_status_ = new ::ManeuverLocalPlannerStatus(*from.maneuver_status_);
  } else {
    maneuver_status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LocalPlannerStatus)
}

void LocalPlannerStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LocalPlannerStatus_LocalPlanner_2eproto.base);
  ::memset(&linear_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maneuver_status_) -
      reinterpret_cast<char*>(&linear_status_)) + sizeof(maneuver_status_));
}

LocalPlannerStatus::~LocalPlannerStatus() {
  // @@protoc_insertion_point(destructor:LocalPlannerStatus)
  SharedDtor();
}

void LocalPlannerStatus::SharedDtor() {
  if (this != internal_default_instance()) delete linear_status_;
  if (this != internal_default_instance()) delete maneuver_status_;
}

void LocalPlannerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalPlannerStatus& LocalPlannerStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LocalPlannerStatus_LocalPlanner_2eproto.base);
  return *internal_default_instance();
}


void LocalPlannerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:LocalPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && linear_status_ != NULL) {
    delete linear_status_;
  }
  linear_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && maneuver_status_ != NULL) {
    delete maneuver_status_;
  }
  maneuver_status_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocalPlannerStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LocalPlannerStatus*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .LinearLocalPlannerStatus linear_status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::LinearLocalPlannerStatus::_InternalParse;
        object = msg->mutable_linear_status();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // .ManeuverLocalPlannerStatus maneuver_status = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ManeuverLocalPlannerStatus::_InternalParse;
        object = msg->mutable_maneuver_status();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocalPlannerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LocalPlannerStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .LinearLocalPlannerStatus linear_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ManeuverLocalPlannerStatus maneuver_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_maneuver_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LocalPlannerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LocalPlannerStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocalPlannerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LocalPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LinearLocalPlannerStatus linear_status = 1;
  if (this->has_linear_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::linear_status(this), output);
  }

  // .ManeuverLocalPlannerStatus maneuver_status = 2;
  if (this->has_maneuver_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::maneuver_status(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LocalPlannerStatus)
}

::google::protobuf::uint8* LocalPlannerStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LocalPlannerStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LinearLocalPlannerStatus linear_status = 1;
  if (this->has_linear_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::linear_status(this), deterministic, target);
  }

  // .ManeuverLocalPlannerStatus maneuver_status = 2;
  if (this->has_maneuver_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::maneuver_status(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LocalPlannerStatus)
  return target;
}

size_t LocalPlannerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LocalPlannerStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LinearLocalPlannerStatus linear_status = 1;
  if (this->has_linear_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_status_);
  }

  // .ManeuverLocalPlannerStatus maneuver_status = 2;
  if (this->has_maneuver_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *maneuver_status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalPlannerStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LocalPlannerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalPlannerStatus* source =
      ::google::protobuf::DynamicCastToGenerated<LocalPlannerStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LocalPlannerStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LocalPlannerStatus)
    MergeFrom(*source);
  }
}

void LocalPlannerStatus::MergeFrom(const LocalPlannerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LocalPlannerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear_status()) {
    mutable_linear_status()->::LinearLocalPlannerStatus::MergeFrom(from.linear_status());
  }
  if (from.has_maneuver_status()) {
    mutable_maneuver_status()->::ManeuverLocalPlannerStatus::MergeFrom(from.maneuver_status());
  }
}

void LocalPlannerStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LocalPlannerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalPlannerStatus::CopyFrom(const LocalPlannerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LocalPlannerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalPlannerStatus::IsInitialized() const {
  return true;
}

void LocalPlannerStatus::Swap(LocalPlannerStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalPlannerStatus::InternalSwap(LocalPlannerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(linear_status_, other->linear_status_);
  swap(maneuver_status_, other->maneuver_status_);
}

::google::protobuf::Metadata LocalPlannerStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LocalPlanner_2eproto);
  return ::file_level_metadata_LocalPlanner_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AirplaneLinearLocalPlannerParams::InitAsDefaultInstance() {
}
class AirplaneLinearLocalPlannerParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AirplaneLinearLocalPlannerParams::kKAltitudeFieldNumber;
const int AirplaneLinearLocalPlannerParams::kKHeadingFieldNumber;
const int AirplaneLinearLocalPlannerParams::kKYawRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AirplaneLinearLocalPlannerParams::AirplaneLinearLocalPlannerParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AirplaneLinearLocalPlannerParams)
}
AirplaneLinearLocalPlannerParams::AirplaneLinearLocalPlannerParams(const AirplaneLinearLocalPlannerParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&k_altitude_, &from.k_altitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_yaw_rate_) -
    reinterpret_cast<char*>(&k_altitude_)) + sizeof(k_yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:AirplaneLinearLocalPlannerParams)
}

void AirplaneLinearLocalPlannerParams::SharedCtor() {
  ::memset(&k_altitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_yaw_rate_) -
      reinterpret_cast<char*>(&k_altitude_)) + sizeof(k_yaw_rate_));
}

AirplaneLinearLocalPlannerParams::~AirplaneLinearLocalPlannerParams() {
  // @@protoc_insertion_point(destructor:AirplaneLinearLocalPlannerParams)
  SharedDtor();
}

void AirplaneLinearLocalPlannerParams::SharedDtor() {
}

void AirplaneLinearLocalPlannerParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AirplaneLinearLocalPlannerParams& AirplaneLinearLocalPlannerParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AirplaneLinearLocalPlannerParams_LocalPlanner_2eproto.base);
  return *internal_default_instance();
}


void AirplaneLinearLocalPlannerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:AirplaneLinearLocalPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&k_altitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_yaw_rate_) -
      reinterpret_cast<char*>(&k_altitude_)) + sizeof(k_yaw_rate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AirplaneLinearLocalPlannerParams::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AirplaneLinearLocalPlannerParams*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double k_altitude = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_k_altitude(val);
        break;
      }
      // double k_heading = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_k_heading(val);
        break;
      }
      // double k_yaw_rate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_k_yaw_rate(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AirplaneLinearLocalPlannerParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AirplaneLinearLocalPlannerParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double k_altitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double k_heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double k_yaw_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AirplaneLinearLocalPlannerParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AirplaneLinearLocalPlannerParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AirplaneLinearLocalPlannerParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AirplaneLinearLocalPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double k_altitude = 1;
  if (this->k_altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->k_altitude(), output);
  }

  // double k_heading = 2;
  if (this->k_heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->k_heading(), output);
  }

  // double k_yaw_rate = 3;
  if (this->k_yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->k_yaw_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AirplaneLinearLocalPlannerParams)
}

::google::protobuf::uint8* AirplaneLinearLocalPlannerParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AirplaneLinearLocalPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double k_altitude = 1;
  if (this->k_altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->k_altitude(), target);
  }

  // double k_heading = 2;
  if (this->k_heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->k_heading(), target);
  }

  // double k_yaw_rate = 3;
  if (this->k_yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->k_yaw_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AirplaneLinearLocalPlannerParams)
  return target;
}

size_t AirplaneLinearLocalPlannerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AirplaneLinearLocalPlannerParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double k_altitude = 1;
  if (this->k_altitude() != 0) {
    total_size += 1 + 8;
  }

  // double k_heading = 2;
  if (this->k_heading() != 0) {
    total_size += 1 + 8;
  }

  // double k_yaw_rate = 3;
  if (this->k_yaw_rate() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AirplaneLinearLocalPlannerParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AirplaneLinearLocalPlannerParams)
  GOOGLE_DCHECK_NE(&from, this);
  const AirplaneLinearLocalPlannerParams* source =
      ::google::protobuf::DynamicCastToGenerated<AirplaneLinearLocalPlannerParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AirplaneLinearLocalPlannerParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AirplaneLinearLocalPlannerParams)
    MergeFrom(*source);
  }
}

void AirplaneLinearLocalPlannerParams::MergeFrom(const AirplaneLinearLocalPlannerParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AirplaneLinearLocalPlannerParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.k_altitude() != 0) {
    set_k_altitude(from.k_altitude());
  }
  if (from.k_heading() != 0) {
    set_k_heading(from.k_heading());
  }
  if (from.k_yaw_rate() != 0) {
    set_k_yaw_rate(from.k_yaw_rate());
  }
}

void AirplaneLinearLocalPlannerParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AirplaneLinearLocalPlannerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AirplaneLinearLocalPlannerParams::CopyFrom(const AirplaneLinearLocalPlannerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AirplaneLinearLocalPlannerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AirplaneLinearLocalPlannerParams::IsInitialized() const {
  return true;
}

void AirplaneLinearLocalPlannerParams::Swap(AirplaneLinearLocalPlannerParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AirplaneLinearLocalPlannerParams::InternalSwap(AirplaneLinearLocalPlannerParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(k_altitude_, other->k_altitude_);
  swap(k_heading_, other->k_heading_);
  swap(k_yaw_rate_, other->k_yaw_rate_);
}

::google::protobuf::Metadata AirplaneLinearLocalPlannerParams::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LocalPlanner_2eproto);
  return ::file_level_metadata_LocalPlanner_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LinearLocalPlannerParams::InitAsDefaultInstance() {
  ::_LinearLocalPlannerParams_default_instance_._instance.get_mutable()->airplane_params_ = const_cast< ::AirplaneLinearLocalPlannerParams*>(
      ::AirplaneLinearLocalPlannerParams::internal_default_instance());
}
class LinearLocalPlannerParams::HasBitSetters {
 public:
  static const ::AirplaneLinearLocalPlannerParams& airplane_params(const LinearLocalPlannerParams* msg);
};

const ::AirplaneLinearLocalPlannerParams&
LinearLocalPlannerParams::HasBitSetters::airplane_params(const LinearLocalPlannerParams* msg) {
  return *msg->airplane_params_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LinearLocalPlannerParams::kAirplaneParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LinearLocalPlannerParams::LinearLocalPlannerParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinearLocalPlannerParams)
}
LinearLocalPlannerParams::LinearLocalPlannerParams(const LinearLocalPlannerParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_airplane_params()) {
    airplane_params_ = new ::AirplaneLinearLocalPlannerParams(*from.airplane_params_);
  } else {
    airplane_params_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LinearLocalPlannerParams)
}

void LinearLocalPlannerParams::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LinearLocalPlannerParams_LocalPlanner_2eproto.base);
  airplane_params_ = NULL;
}

LinearLocalPlannerParams::~LinearLocalPlannerParams() {
  // @@protoc_insertion_point(destructor:LinearLocalPlannerParams)
  SharedDtor();
}

void LinearLocalPlannerParams::SharedDtor() {
  if (this != internal_default_instance()) delete airplane_params_;
}

void LinearLocalPlannerParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearLocalPlannerParams& LinearLocalPlannerParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LinearLocalPlannerParams_LocalPlanner_2eproto.base);
  return *internal_default_instance();
}


void LinearLocalPlannerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:LinearLocalPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && airplane_params_ != NULL) {
    delete airplane_params_;
  }
  airplane_params_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LinearLocalPlannerParams::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LinearLocalPlannerParams*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .AirplaneLinearLocalPlannerParams airplane_params = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::AirplaneLinearLocalPlannerParams::_InternalParse;
        object = msg->mutable_airplane_params();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LinearLocalPlannerParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinearLocalPlannerParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AirplaneLinearLocalPlannerParams airplane_params = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_airplane_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinearLocalPlannerParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinearLocalPlannerParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LinearLocalPlannerParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinearLocalPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AirplaneLinearLocalPlannerParams airplane_params = 1;
  if (this->has_airplane_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::airplane_params(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinearLocalPlannerParams)
}

::google::protobuf::uint8* LinearLocalPlannerParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LinearLocalPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AirplaneLinearLocalPlannerParams airplane_params = 1;
  if (this->has_airplane_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::airplane_params(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinearLocalPlannerParams)
  return target;
}

size_t LinearLocalPlannerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LinearLocalPlannerParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AirplaneLinearLocalPlannerParams airplane_params = 1;
  if (this->has_airplane_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *airplane_params_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearLocalPlannerParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LinearLocalPlannerParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearLocalPlannerParams* source =
      ::google::protobuf::DynamicCastToGenerated<LinearLocalPlannerParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LinearLocalPlannerParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LinearLocalPlannerParams)
    MergeFrom(*source);
  }
}

void LinearLocalPlannerParams::MergeFrom(const LinearLocalPlannerParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LinearLocalPlannerParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_airplane_params()) {
    mutable_airplane_params()->::AirplaneLinearLocalPlannerParams::MergeFrom(from.airplane_params());
  }
}

void LinearLocalPlannerParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LinearLocalPlannerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearLocalPlannerParams::CopyFrom(const LinearLocalPlannerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LinearLocalPlannerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearLocalPlannerParams::IsInitialized() const {
  return true;
}

void LinearLocalPlannerParams::Swap(LinearLocalPlannerParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LinearLocalPlannerParams::InternalSwap(LinearLocalPlannerParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(airplane_params_, other->airplane_params_);
}

::google::protobuf::Metadata LinearLocalPlannerParams::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LocalPlanner_2eproto);
  return ::file_level_metadata_LocalPlanner_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ManeuverLocalPlannerParams::InitAsDefaultInstance() {
}
class ManeuverLocalPlannerParams::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManeuverLocalPlannerParams::kKAltitudeFieldNumber;
const int ManeuverLocalPlannerParams::kKConvergenceFieldNumber;
const int ManeuverLocalPlannerParams::kKYawRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManeuverLocalPlannerParams::ManeuverLocalPlannerParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ManeuverLocalPlannerParams)
}
ManeuverLocalPlannerParams::ManeuverLocalPlannerParams(const ManeuverLocalPlannerParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&k_altitude_, &from.k_altitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_yaw_rate_) -
    reinterpret_cast<char*>(&k_altitude_)) + sizeof(k_yaw_rate_));
  // @@protoc_insertion_point(copy_constructor:ManeuverLocalPlannerParams)
}

void ManeuverLocalPlannerParams::SharedCtor() {
  ::memset(&k_altitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_yaw_rate_) -
      reinterpret_cast<char*>(&k_altitude_)) + sizeof(k_yaw_rate_));
}

ManeuverLocalPlannerParams::~ManeuverLocalPlannerParams() {
  // @@protoc_insertion_point(destructor:ManeuverLocalPlannerParams)
  SharedDtor();
}

void ManeuverLocalPlannerParams::SharedDtor() {
}

void ManeuverLocalPlannerParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManeuverLocalPlannerParams& ManeuverLocalPlannerParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ManeuverLocalPlannerParams_LocalPlanner_2eproto.base);
  return *internal_default_instance();
}


void ManeuverLocalPlannerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ManeuverLocalPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&k_altitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_yaw_rate_) -
      reinterpret_cast<char*>(&k_altitude_)) + sizeof(k_yaw_rate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ManeuverLocalPlannerParams::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ManeuverLocalPlannerParams*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double k_altitude = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_k_altitude(val);
        break;
      }
      // double k_convergence = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_k_convergence(val);
        break;
      }
      // double k_yaw_rate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        double val;
        ::std::memcpy(&val, ptr, 8);
        ptr += 8;
        msg->set_k_yaw_rate(val);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ManeuverLocalPlannerParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ManeuverLocalPlannerParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double k_altitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double k_convergence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_convergence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double k_yaw_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &k_yaw_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ManeuverLocalPlannerParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ManeuverLocalPlannerParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ManeuverLocalPlannerParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ManeuverLocalPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double k_altitude = 1;
  if (this->k_altitude() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->k_altitude(), output);
  }

  // double k_convergence = 2;
  if (this->k_convergence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->k_convergence(), output);
  }

  // double k_yaw_rate = 3;
  if (this->k_yaw_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->k_yaw_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ManeuverLocalPlannerParams)
}

::google::protobuf::uint8* ManeuverLocalPlannerParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ManeuverLocalPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double k_altitude = 1;
  if (this->k_altitude() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->k_altitude(), target);
  }

  // double k_convergence = 2;
  if (this->k_convergence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->k_convergence(), target);
  }

  // double k_yaw_rate = 3;
  if (this->k_yaw_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->k_yaw_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManeuverLocalPlannerParams)
  return target;
}

size_t ManeuverLocalPlannerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManeuverLocalPlannerParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double k_altitude = 1;
  if (this->k_altitude() != 0) {
    total_size += 1 + 8;
  }

  // double k_convergence = 2;
  if (this->k_convergence() != 0) {
    total_size += 1 + 8;
  }

  // double k_yaw_rate = 3;
  if (this->k_yaw_rate() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManeuverLocalPlannerParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ManeuverLocalPlannerParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ManeuverLocalPlannerParams* source =
      ::google::protobuf::DynamicCastToGenerated<ManeuverLocalPlannerParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ManeuverLocalPlannerParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ManeuverLocalPlannerParams)
    MergeFrom(*source);
  }
}

void ManeuverLocalPlannerParams::MergeFrom(const ManeuverLocalPlannerParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ManeuverLocalPlannerParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.k_altitude() != 0) {
    set_k_altitude(from.k_altitude());
  }
  if (from.k_convergence() != 0) {
    set_k_convergence(from.k_convergence());
  }
  if (from.k_yaw_rate() != 0) {
    set_k_yaw_rate(from.k_yaw_rate());
  }
}

void ManeuverLocalPlannerParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ManeuverLocalPlannerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManeuverLocalPlannerParams::CopyFrom(const ManeuverLocalPlannerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManeuverLocalPlannerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManeuverLocalPlannerParams::IsInitialized() const {
  return true;
}

void ManeuverLocalPlannerParams::Swap(ManeuverLocalPlannerParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManeuverLocalPlannerParams::InternalSwap(ManeuverLocalPlannerParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(k_altitude_, other->k_altitude_);
  swap(k_convergence_, other->k_convergence_);
  swap(k_yaw_rate_, other->k_yaw_rate_);
}

::google::protobuf::Metadata ManeuverLocalPlannerParams::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LocalPlanner_2eproto);
  return ::file_level_metadata_LocalPlanner_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LocalPlannerParams::InitAsDefaultInstance() {
  ::_LocalPlannerParams_default_instance_._instance.get_mutable()->linear_params_ = const_cast< ::LinearLocalPlannerParams*>(
      ::LinearLocalPlannerParams::internal_default_instance());
  ::_LocalPlannerParams_default_instance_._instance.get_mutable()->maneuver_params_ = const_cast< ::ManeuverLocalPlannerParams*>(
      ::ManeuverLocalPlannerParams::internal_default_instance());
}
class LocalPlannerParams::HasBitSetters {
 public:
  static const ::LinearLocalPlannerParams& linear_params(const LocalPlannerParams* msg);
  static const ::ManeuverLocalPlannerParams& maneuver_params(const LocalPlannerParams* msg);
};

const ::LinearLocalPlannerParams&
LocalPlannerParams::HasBitSetters::linear_params(const LocalPlannerParams* msg) {
  return *msg->linear_params_;
}
const ::ManeuverLocalPlannerParams&
LocalPlannerParams::HasBitSetters::maneuver_params(const LocalPlannerParams* msg) {
  return *msg->maneuver_params_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalPlannerParams::kLinearParamsFieldNumber;
const int LocalPlannerParams::kManeuverParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalPlannerParams::LocalPlannerParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LocalPlannerParams)
}
LocalPlannerParams::LocalPlannerParams(const LocalPlannerParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linear_params()) {
    linear_params_ = new ::LinearLocalPlannerParams(*from.linear_params_);
  } else {
    linear_params_ = NULL;
  }
  if (from.has_maneuver_params()) {
    maneuver_params_ = new ::ManeuverLocalPlannerParams(*from.maneuver_params_);
  } else {
    maneuver_params_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:LocalPlannerParams)
}

void LocalPlannerParams::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LocalPlannerParams_LocalPlanner_2eproto.base);
  ::memset(&linear_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maneuver_params_) -
      reinterpret_cast<char*>(&linear_params_)) + sizeof(maneuver_params_));
}

LocalPlannerParams::~LocalPlannerParams() {
  // @@protoc_insertion_point(destructor:LocalPlannerParams)
  SharedDtor();
}

void LocalPlannerParams::SharedDtor() {
  if (this != internal_default_instance()) delete linear_params_;
  if (this != internal_default_instance()) delete maneuver_params_;
}

void LocalPlannerParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalPlannerParams& LocalPlannerParams::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LocalPlannerParams_LocalPlanner_2eproto.base);
  return *internal_default_instance();
}


void LocalPlannerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:LocalPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && linear_params_ != NULL) {
    delete linear_params_;
  }
  linear_params_ = NULL;
  if (GetArenaNoVirtual() == NULL && maneuver_params_ != NULL) {
    delete maneuver_params_;
  }
  maneuver_params_ = NULL;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocalPlannerParams::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LocalPlannerParams*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ::google::protobuf::uint32 tag;
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .LinearLocalPlannerParams linear_params = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::LinearLocalPlannerParams::_InternalParse;
        object = msg->mutable_linear_params();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      // .ManeuverLocalPlannerParams maneuver_params = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::ManeuverLocalPlannerParams::_InternalParse;
        object = msg->mutable_maneuver_params();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          bool ok = ctx->ValidEndGroup(tag);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth);
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocalPlannerParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LocalPlannerParams)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .LinearLocalPlannerParams linear_params = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ManeuverLocalPlannerParams maneuver_params = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_maneuver_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LocalPlannerParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LocalPlannerParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocalPlannerParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LocalPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LinearLocalPlannerParams linear_params = 1;
  if (this->has_linear_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::linear_params(this), output);
  }

  // .ManeuverLocalPlannerParams maneuver_params = 2;
  if (this->has_maneuver_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::maneuver_params(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LocalPlannerParams)
}

::google::protobuf::uint8* LocalPlannerParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LocalPlannerParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LinearLocalPlannerParams linear_params = 1;
  if (this->has_linear_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::linear_params(this), deterministic, target);
  }

  // .ManeuverLocalPlannerParams maneuver_params = 2;
  if (this->has_maneuver_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::maneuver_params(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LocalPlannerParams)
  return target;
}

size_t LocalPlannerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LocalPlannerParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LinearLocalPlannerParams linear_params = 1;
  if (this->has_linear_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_params_);
  }

  // .ManeuverLocalPlannerParams maneuver_params = 2;
  if (this->has_maneuver_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *maneuver_params_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalPlannerParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LocalPlannerParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalPlannerParams* source =
      ::google::protobuf::DynamicCastToGenerated<LocalPlannerParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LocalPlannerParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LocalPlannerParams)
    MergeFrom(*source);
  }
}

void LocalPlannerParams::MergeFrom(const LocalPlannerParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LocalPlannerParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear_params()) {
    mutable_linear_params()->::LinearLocalPlannerParams::MergeFrom(from.linear_params());
  }
  if (from.has_maneuver_params()) {
    mutable_maneuver_params()->::ManeuverLocalPlannerParams::MergeFrom(from.maneuver_params());
  }
}

void LocalPlannerParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LocalPlannerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalPlannerParams::CopyFrom(const LocalPlannerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LocalPlannerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalPlannerParams::IsInitialized() const {
  return true;
}

void LocalPlannerParams::Swap(LocalPlannerParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalPlannerParams::InternalSwap(LocalPlannerParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(linear_params_, other->linear_params_);
  swap(maneuver_params_, other->maneuver_params_);
}

::google::protobuf::Metadata LocalPlannerParams::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_LocalPlanner_2eproto);
  return ::file_level_metadata_LocalPlanner_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::AirplaneLinearLocalPlannerStatus* Arena::CreateMaybeMessage< ::AirplaneLinearLocalPlannerStatus >(Arena* arena) {
  return Arena::CreateInternal< ::AirplaneLinearLocalPlannerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::LinearLocalPlannerStatus* Arena::CreateMaybeMessage< ::LinearLocalPlannerStatus >(Arena* arena) {
  return Arena::CreateInternal< ::LinearLocalPlannerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::ManeuverLocalPlannerStatus* Arena::CreateMaybeMessage< ::ManeuverLocalPlannerStatus >(Arena* arena) {
  return Arena::CreateInternal< ::ManeuverLocalPlannerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::LocalPlannerStatus* Arena::CreateMaybeMessage< ::LocalPlannerStatus >(Arena* arena) {
  return Arena::CreateInternal< ::LocalPlannerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::AirplaneLinearLocalPlannerParams* Arena::CreateMaybeMessage< ::AirplaneLinearLocalPlannerParams >(Arena* arena) {
  return Arena::CreateInternal< ::AirplaneLinearLocalPlannerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::LinearLocalPlannerParams* Arena::CreateMaybeMessage< ::LinearLocalPlannerParams >(Arena* arena) {
  return Arena::CreateInternal< ::LinearLocalPlannerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ManeuverLocalPlannerParams* Arena::CreateMaybeMessage< ::ManeuverLocalPlannerParams >(Arena* arena) {
  return Arena::CreateInternal< ::ManeuverLocalPlannerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::LocalPlannerParams* Arena::CreateMaybeMessage< ::LocalPlannerParams >(Arena* arena) {
  return Arena::CreateInternal< ::LocalPlannerParams >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
